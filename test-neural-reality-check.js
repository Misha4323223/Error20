/**
 * üîç –î–û–°–ö–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å (3 –∏–ª–∏ 12 —Å–ª–æ–µ–≤) —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ
 */

import fetch from 'node-fetch';

async function testNeuralReality() {
    console.log('üîç –î–û–°–ö–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –ù–ï–ô–†–û–°–ï–¢–ò');
    console.log('=' .repeat(60));
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ neural API
        console.log('\n1. üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê NEURAL API:');
        const statusResponse = await fetch('http://localhost:5000/api/neural/status');
        const statusData = await statusResponse.json();
        console.log('   Status API response:', JSON.stringify(statusData, null, 2));
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ neural API
        console.log('\n2. üìà –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò NEURAL API:');
        const statsResponse = await fetch('http://localhost:5000/api/neural/stats');
        const statsData = await statsResponse.json();
        console.log('   Stats API response:', JSON.stringify(statsData, null, 2));
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ dashboard —Å—Ç–∞—Ç—É—Å–∞
        console.log('\n3. üñ•Ô∏è –ü–†–û–í–ï–†–ö–ê DASHBOARD –°–¢–ê–¢–£–°–ê:');
        const dashboardResponse = await fetch('http://localhost:5000/api/neural/status/dashboard');
        const dashboardData = await dashboardResponse.json();
        console.log('   Dashboard response:', JSON.stringify(dashboardData, null, 2));
        
        // 4. –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç
        console.log('\n4. ü§ñ –¢–ï–°–¢–û–í–´–ï –í–û–ü–†–û–°–´ –í –ß–ê–¢:');
        const testQuestions = [
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?"
        ];
        
        for (const question of testQuestions) {
            console.log(`\n   –í–æ–ø—Ä–æ—Å: "${question}"`);
            try {
                const chatResponse = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        message: question,
                        forceNeuralIntegration: true 
                    })
                });
                
                const chatData = await chatResponse.json();
                console.log(`   –û—Ç–≤–µ—Ç (${chatData.reply?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤):`, 
                    chatData.reply?.substring(0, 100) + (chatData.reply?.length > 100 ? '...' : ''));
                console.log(`   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${chatData.provider}`);
                console.log(`   –ú–æ–¥–µ–ª—å: ${chatData.model}`);
                console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${chatData.confidence}%`);
                
                // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
                if (chatData.reply) {
                    const words = chatData.reply.split(' ');
                    const uniqueWords = new Set(words);
                    const repetitionRatio = words.length / uniqueWords.size;
                    const hasMeaningfulContent = chatData.reply.length > 50 && repetitionRatio < 2;
                    
                    console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${hasMeaningfulContent ? '‚úÖ –û—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π' : '‚ùå –ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π'}`);
                    console.log(`   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${repetitionRatio.toFixed(2)}`);
                } else {
                    console.log('   –ö–∞—á–µ—Å—Ç–≤–æ: ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
                }
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: ${error.message}`);
            }
        }
        
        // 5. –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        console.log('\n5. üîç –ê–ù–ê–õ–ò–ó –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:');
        
        const declaredMode = statusData.status || statusData.mode;
        const realMode = statsData.mode || statsData.status;
        
        if (declaredMode !== realMode) {
            console.log(`   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!`);
            console.log(`   üìã –ó–∞—è–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${declaredMode}`);
            console.log(`   üéØ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: ${realMode}`);
        } else {
            console.log(`   ‚úÖ –†–µ–∂–∏–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${declaredMode}`);
        }
        
        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
        console.log('\n6. üß† –ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ú–û–î–ï–õ–ò:');
        if (statsData.parameters) {
            const params = statsData.parameters;
            console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${params.toLocaleString()}`);
            console.log(`   –°–ª–æ–∏: ${statsData.layers || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            
            if (params > 100000000) {
                console.log(`   üéØ –≠—Ç–æ –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å (115M+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)`);
            } else if (params > 2000000) {
                console.log(`   ‚ö° –≠—Ç–æ lite –º–æ–¥–µ–ª—å (2.4M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)`);
            } else {
                console.log(`   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏`);
            }
        }
        
        // 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        console.log('\n7. ‚öñÔ∏è –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:');
        console.log('=' .repeat(60));
        
        if (declaredMode === 'full' && realMode === 'full') {
            console.log('‚úÖ –°–¢–ê–¢–£–°: –ó–∞—è–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å');
        } else if (declaredMode === 'full' && realMode === 'lite') {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç lite');
        } else if (declaredMode === 'lite' && realMode === 'lite') {
            console.log('‚úÖ –°–¢–ê–¢–£–°: –ó–∞—è–≤–ª–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞ lite –º–æ–¥–µ–ª—å');
        } else {
            console.log('‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨: –°—Ç–∞—Ç—É—Å—ã –Ω–µ —è—Å–Ω—ã');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
testNeuralReality().catch(console.error);