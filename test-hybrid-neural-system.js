/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ô –ù–ï–ô–†–û–°–ï–¢–ï–í–û–ô –°–ò–°–¢–ï–ú–´
 * –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ lite ‚Üí full ‚Üí fallback —Ü–µ–ø–æ—á–∫–∏
 */

const { initializeNeuralIntegration } = require('./server/neural-integration.cjs');
const { getGlobalMemoryMonitor } = require('./server/memory-monitor.cjs');
const { getGlobalProgressManager } = require('./server/neural-progress-manager.cjs');

class HybridNeuralSystemTester {
  constructor() {
    this.testResults = [];
    this.startTime = Date.now();
    this.neuralIntegration = null;
    this.memoryMonitor = null;
    this.progressManager = null;
  }

  async runFullTestSuite() {
    console.log('üß™ ===== –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ô –ù–ï–ô–†–û–°–ï–¢–ï–í–û–ô –°–ò–°–¢–ï–ú–´ =====');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await this.initializeTestComponents();
      
      // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      await this.testScenario1_NormalFlow();
      await this.testScenario2_MemoryLimits();
      await this.testScenario3_StressTest();
      await this.testScenario4_FallbackSystem();
      await this.testScenario5_HotSwapSystem();
      await this.testScenario6_ErrorRecovery();
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateFinalReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.recordTest('Critical System Error', false, 1, Date.now() - this.startTime);
    }
  }

  async initializeTestComponents() {
    console.log('\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.memoryMonitor = getGlobalMemoryMonitor();
      this.progressManager = getGlobalProgressManager();
      
      // –ó–∞–ø—É—Å–∫ Progress Manager WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      this.progressManager.startWebSocketServer(8082); // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      this.recordTest('Component Initialization', true, 1, 100);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      this.recordTest('Component Initialization', false, 1, 100);
      throw error;
    }
  }

  async testScenario1_NormalFlow() {
    console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ Lite ‚Üí Full');
    const testStart = Date.now();
    
    try {
      // –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LITE
      console.log('  üìã –¢–µ—Å—Ç 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LITE —Ä–µ–∂–∏–º–∞...');
      this.neuralIntegration = await initializeNeuralIntegration();
      
      if (this.neuralIntegration.mode === 'lite') {
        console.log('  ‚úÖ LITE —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.recordTest('LITE Initialization', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ùå LITE —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        this.recordTest('LITE Initialization', false, 1, Date.now() - testStart);
      }
      
      // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ LITE —Ä–µ–∂–∏–º–µ
      console.log('  üìã –¢–µ—Å—Ç 1.2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ LITE —Ä–µ–∂–∏–º–µ...');
      const liteResponse = await this.neuralIntegration.generateHybridResponse(
        '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', 
        { maxTokens: 20, temperature: 0.7 }
      );
      
      if (liteResponse && liteResponse.length > 5) {
        console.log('  ‚úÖ LITE –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', liteResponse.substring(0, 50) + '...');
        this.recordTest('LITE Generation', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ùå LITE –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('LITE Generation', false, 1, Date.now() - testStart);
      }
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è upgrade
      console.log('  üìã –¢–µ—Å—Ç 1.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ upgrade...');
      const canUpgrade = this.memoryMonitor.canLoadFullNeural();
      
      if (canUpgrade) {
        console.log('  ‚úÖ –ü–∞–º—è—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç upgrade –Ω–∞ FULL');
        this.recordTest('Memory Check for Upgrade', true, 1, Date.now() - testStart);
        
        // –¢–µ—Å—Ç 4: Upgrade –Ω–∞ FULL
        console.log('  üìã –¢–µ—Å—Ç 1.4: Upgrade –Ω–∞ FULL —Ä–µ–∂–∏–º...');
        const upgradeResult = await this.neuralIntegration.upgradeToFull();
        
        if (upgradeResult.success) {
          console.log('  ‚úÖ Upgrade –Ω–∞ FULL —É—Å–ø–µ—à–µ–Ω');
          this.recordTest('Full Upgrade', true, 1, Date.now() - testStart);
        } else {
          console.log('  ‚ö†Ô∏è Upgrade –Ω–∞ FULL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:', upgradeResult.message);
          this.recordTest('Full Upgrade', false, 1, Date.now() - testStart);
        }
      } else {
        console.log('  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è upgrade');
        this.recordTest('Memory Check for Upgrade', false, 1, Date.now() - testStart);
      }
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 1:', error);
      this.recordTest('Scenario 1 Overall', false, 1, Date.now() - testStart);
    }
  }

  async testScenario2_MemoryLimits() {
    console.log('\nüß† –°–¶–ï–ù–ê–†–ò–ô 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏');
    const testStart = Date.now();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
      const memoryStatus = this.memoryMonitor.getCurrentMemoryStatus();
      console.log(`  üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memoryStatus.usagePercentFormatted}`);
      console.log(`  üíæ –î–æ—Å—Ç—É–ø–Ω–æ: ${memoryStatus.freeMB}MB –∏–∑ ${memoryStatus.totalMB}MB`);
      
      // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
      const recommendedMode = this.memoryMonitor.recommendNeuralMode();
      console.log(`  üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º: ${recommendedMode.mode}`);
      console.log(`  üí° –ü—Ä–∏—á–∏–Ω–∞: ${recommendedMode.reason}`);
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
      this.memoryMonitor.startMemoryMonitoring();
      
      // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      const history = this.memoryMonitor.getMemoryHistory();
      console.log(`  üìà –°–æ–±—Ä–∞–Ω–æ ${history.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      
      if (history.length > 0) {
        console.log('  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('Memory Monitoring', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('Memory Monitoring', false, 1, Date.now() - testStart);
      }
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 2:', error);
      this.recordTest('Scenario 2 Overall', false, 1, Date.now() - testStart);
    }
  }

  async testScenario3_StressTest() {
    console.log('\n‚ö° –°–¶–ï–ù–ê–†–ò–ô 3: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    const testStart = Date.now();
    
    try {
      const requests = [
        '–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö',
        '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è?',
        '–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –≤—ã—à–∏–≤–∫–∏',
        '–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã',
        '–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞?'
      ];
      
      const results = [];
      const concurrent = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      
      console.log(`  üîÑ –ó–∞–ø—É—Å–∫ ${concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
      
      for (let i = 0; i < requests.length; i += concurrent) {
        const batch = requests.slice(i, i + concurrent);
        const batchPromises = batch.map(async (request, index) => {
          try {
            const response = await this.neuralIntegration.generateHybridResponse(
              request,
              { maxTokens: 30, temperature: 0.8 }
            );
            return { success: true, request, response: response?.substring(0, 100) };
          } catch (error) {
            return { success: false, request, error: error.message };
          }
        });
        
        const batchResults = await Promise.allSettled(batchPromises);
        results.push(...batchResults);
        
        console.log(`  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + batch.length}/${requests.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      }
      
      const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
      const failed = results.length - successful;
      
      console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}/${results.length}`);
      console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${failed}/${results.length}`);
      
      const successRate = (successful / results.length) * 100;
      
      if (successRate >= 80) {
        console.log(`  üéâ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${successRate.toFixed(1)}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏`);
        this.recordTest('Stress Test', true, results.length, Date.now() - testStart);
      } else {
        console.log(`  ‚ö†Ô∏è –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${successRate.toFixed(1)}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏`);
        this.recordTest('Stress Test', false, results.length, Date.now() - testStart);
      }
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 3:', error);
      this.recordTest('Scenario 3 Overall', false, 1, Date.now() - testStart);
    }
  }

  async testScenario4_FallbackSystem() {
    console.log('\nüõ°Ô∏è –°–¶–ï–ù–ê–†–ò–ô 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã fallback');
    const testStart = Date.now();
    
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
      console.log('  üîß –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
      
      const originalMode = this.neuralIntegration.mode;
      this.neuralIntegration.mode = 'error';
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
      const fallbackResponse = await this.neuralIntegration.generateHybridResponse(
        '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è fallback',
        { useFallback: true }
      );
      
      if (fallbackResponse && fallbackResponse.length > 10) {
        console.log('  ‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:', fallbackResponse.substring(0, 50) + '...');
        this.recordTest('Fallback System', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ùå Fallback —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('Fallback System', false, 1, Date.now() - testStart);
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
      this.neuralIntegration.mode = originalMode;
      console.log('  üîÑ –†–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 4:', error);
      this.recordTest('Scenario 4 Overall', false, 1, Date.now() - testStart);
    }
  }

  async testScenario5_HotSwapSystem() {
    console.log('\nüîÑ –°–¶–ï–ù–ê–†–ò–ô 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ä—è—á–µ–π –∑–∞–º–µ–Ω—ã');
    const testStart = Date.now();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
      const currentMode = this.neuralIntegration.mode;
      console.log(`  üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${currentMode}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ switchToFullModel
      console.log('  üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ switchToFullModel...');
      const switchResult = await this.neuralIntegration.switchToFullModel();
      
      if (switchResult.success) {
        console.log('  ‚úÖ Hot swap —Ä–∞–±–æ—Ç–∞–µ—Ç:', switchResult.message);
        this.recordTest('Hot Swap System', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ö†Ô∏è Hot swap –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', switchResult.message);
        this.recordTest('Hot Swap System', false, 1, Date.now() - testStart);
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      console.log('  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Progress Manager...');
      const progressStatus = this.progressManager.getProgressStatus();
      console.log(`  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressStatus.progress}%, —Å—Ç–∞—Ç—É—Å: ${progressStatus.status}`);
      
      if (progressStatus.status !== 'error') {
        console.log('  ‚úÖ Progress Manager —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('Progress Manager', true, 1, Date.now() - testStart);
      } else {
        console.log('  ‚ùå Progress Manager –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        this.recordTest('Progress Manager', false, 1, Date.now() - testStart);
      }
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 5:', error);
      this.recordTest('Scenario 5 Overall', false, 1, Date.now() - testStart);
    }
  }

  async testScenario6_ErrorRecovery() {
    console.log('\nüö® –°–¶–ï–ù–ê–†–ò–ô 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫');
    const testStart = Date.now();
    
    try {
      // –¢–µ—Å—Ç 1: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('  üîß –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      const errorScenarios = [
        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä',
        '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        null, // Null –∑–Ω–∞—á–µ–Ω–∏–µ
        '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: ' + 'a'.repeat(1000)
      ];
      
      let recoveredCount = 0;
      
      for (const scenario of errorScenarios) {
        try {
          const response = await this.neuralIntegration.generateHybridResponse(
            scenario,
            { maxTokens: 10, temperature: 0.5 }
          );
          
          if (response || response === '') {
            recoveredCount++;
            console.log(`  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è: "${scenario?.substring(0, 30)}..."`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è –ù–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è: "${scenario?.substring(0, 30)}..."`);
        }
      }
      
      const recoveryRate = (recoveredCount / errorScenarios.length) * 100;
      
      if (recoveryRate >= 75) {
        console.log(`  üéâ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${recoveryRate.toFixed(1)}%`);
        this.recordTest('Error Recovery', true, errorScenarios.length, Date.now() - testStart);
      } else {
        console.log(`  ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞: ${recoveryRate.toFixed(1)}%`);
        this.recordTest('Error Recovery', false, errorScenarios.length, Date.now() - testStart);
      }
      
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ 6:', error);
      this.recordTest('Scenario 6 Overall', false, 1, Date.now() - testStart);
    }
  }

  recordTest(testName, passed, total, duration) {
    this.testResults.push({
      testName,
      passed,
      total,
      duration,
      timestamp: new Date().toISOString()
    });
  }

  generateFinalReport() {
    const totalTime = Date.now() - this.startTime;
    const totalTests = this.testResults.length;
    const passedTests = this.testResults.filter(test => test.passed).length;
    const failedTests = totalTests - passedTests;
    const successRate = (passedTests / totalTests) * 100;
    
    console.log('\nüìä ===== –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====');
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}–º—Å`);
    console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failedTests}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate.toFixed(1)}%`);
    
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    this.testResults.forEach((test, index) => {
      const status = test.passed ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${index + 1}. ${test.testName} (${test.duration}–º—Å)`);
    });
    
    // –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    if (successRate >= 90) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!');
      console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
      console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º—ã fallback –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã');
    } else if (successRate >= 75) {
      console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–ê');
      console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } else {
      console.log('\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    return {
      totalTime,
      totalTests,
      passedTests,
      failedTests,
      successRate,
      results: this.testResults
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  const tester = new HybridNeuralSystemTester();
  
  try {
    await tester.runFullTestSuite();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –º–æ–¥—É–ª—å –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests();
}

module.exports = { HybridNeuralSystemTester, runTests };