/**
 * –û–±—É—á–µ–Ω–∏–µ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ BOOOMERANGS
 * –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */

const tf = require('@tensorflow/tfjs-node');

class NeuralLiteTrainer {
  constructor() {
    this.neuralLite = null;
    this.trainingData = [];
    this.vocabulary = new Map();
    this.reverseVocabulary = new Map();
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è LITE...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º neural lite
    const { BooomerangsNeuralLite } = require('./server/neural-network-lite.cjs');
    this.neuralLite = new BooomerangsNeuralLite();
    await this.neuralLite.initialize();
    
    this.vocabulary = this.neuralLite.vocabulary;
    this.reverseVocabulary = this.neuralLite.reverseVocabulary;
    
    console.log('‚úÖ Neural Lite –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
    console.log(`üìö –°–ª–æ–≤–∞—Ä—å: ${this.vocabulary.size} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  prepareTrainingData() {
    console.log('üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ BOOOMERANGS
    const dialogues = [
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      { input: '–ü—Ä–∏–≤–µ—Ç', output: '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –Ø BOOOMERANGS AI –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏' },
      { input: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π', output: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ' },
      { input: '–ö–∞–∫ –¥–µ–ª–∞', output: '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –≤—ã–∑–æ–≤–∞–º' },
      
      // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      { input: '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å', output: '–Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏' },
      { input: '–ß—Ç–æ –º–æ–∂–µ—à—å', output: '–ú–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –ø–µ—á–∞—Ç–∏' },
      { input: '–¢–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', output: 'BOOOMERANGS AI —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ' },
      
      // –°–æ–∑–¥–∞–Ω–∏–µ
      { input: '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É', output: '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å' },
      { input: '–°–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', output: '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–æ–∑–¥–∞–º! –†–∞—Å—Å–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏ —Å—Ç–∏–ª—å —Ü–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
      { input: '–ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞', output: '–ì–æ—Ç–æ–≤ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–æ—Ç–∞! –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–ª–∏ –º—É–ª—å—Ç—è—à–Ω—ã–π' },
      
      // –ü–æ–º–æ—â—å
      { input: '–ü–æ–º–æ–≥–∏ –º–Ω–µ', output: '–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –†–∞—Å—Å–∫–∞–∂–∏ —Å —á–µ–º –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å' },
      { input: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', output: '–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –û–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ' },
      
      // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
      { input: '–°–ø–∞—Å–∏–±–æ', output: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º' },
      { input: '–ë–ª–∞–≥–æ–¥–∞—Ä—é', output: '–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å—Ç—å –µ—â–µ –∏–¥–µ–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏' },
      
      // –í–æ–ø—Ä–æ—Å—ã –æ BOOOMERANGS
      { input: '–ß—Ç–æ —Ç–∞–∫–æ–µ BOOOMERANGS', output: 'BOOOMERANGS —ç—Ç–æ AI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞' },
      { input: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', output: '–Ø BOOOMERANGS AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö' },
      
      // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      { input: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—à—å', output: '–ò—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤' },
      { input: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ', output: '–†–∞–¥ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –∫–∞–∫ —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É' },
      { input: '–•–æ—Ä–æ—à–æ', output: '–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ' },
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      { input: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', output: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —ç—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SVG' },
      { input: '–ß—Ç–æ —Ç–∞–∫–æ–µ –≤—ã—à–∏–≤–∫–∞', output: '–í—ã—à–∏–≤–∫–∞ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —É–∑–æ—Ä–æ–≤ –Ω–∏—Ç–∫–∞–º–∏ –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω' }
    ];

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—É—á–∞—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
    this.trainingData = dialogues.map(dialogue => {
      const inputTokens = this.tokenizeText(dialogue.input);
      const outputTokens = this.tokenizeText(dialogue.output);
      
      return {
        input: inputTokens,
        output: outputTokens,
        inputText: dialogue.input,
        outputText: dialogue.output
      };
    }).filter(item => item.input.length > 0 && item.output.length > 0);

    console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${this.trainingData.length} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤`);
    return this.trainingData;
  }

  tokenizeText(text) {
    if (!text) return [];
    
    const words = text.toLowerCase().match(/\b\w+\b/g) || [];
    return words.map(word => {
      return this.vocabulary.get(word) || this.vocabulary.get('<UNK>') || 3;
    }).slice(0, 32); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  }

  async trainModel() {
    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...');
    
    if (this.trainingData.length === 0) {
      throw new Error('–ù–µ—Ç –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    const batchSize = Math.min(8, this.trainingData.length);
    const maxLength = 32;
    
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (input sequences)
    const inputSequences = [];
    const targetSequences = [];
    
    for (let i = 0; i < this.trainingData.length; i += batchSize) {
      const batch = this.trainingData.slice(i, i + batchSize);
      
      const batchInputs = batch.map(item => {
        const padded = [...item.input];
        while (padded.length < maxLength) padded.push(0); // PAD token
        return padded.slice(0, maxLength);
      });
      
      const batchTargets = batch.map(item => {
        const padded = [...item.output];
        while (padded.length < maxLength) padded.push(0); // PAD token
        return padded.slice(0, maxLength);
      });
      
      inputSequences.push(batchInputs);
      targetSequences.push(batchTargets);
    }

    console.log(`üìä –û–±—É—á–∞—é—â–∏—Ö –±–∞—Ç—á–µ–π: ${inputSequences.length}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${batchSize}, –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${maxLength}`);

    // –û–±—É—á–µ–Ω–∏–µ
    const epochs = 10;
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ ${epochs} —ç–ø–æ—Ö...`);
    
    for (let epoch = 0; epoch < epochs; epoch++) {
      console.log(`\nüìà –≠–ø–æ—Ö–∞ ${epoch + 1}/${epochs}`);
      let totalLoss = 0;
      
      for (let batchIdx = 0; batchIdx < inputSequences.length; batchIdx++) {
        const batchInputs = inputSequences[batchIdx];
        const batchTargets = targetSequences[batchIdx];
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        const inputTensor = tf.tensor3d([batchInputs]);
        const targetTensor = tf.tensor3d([batchTargets]);
        const positionTensor = tf.tensor3d([batchInputs.map(() => 
          Array.from({ length: maxLength }, (_, i) => i)
        )]);
        
        try {
          // –û–±—É—á–∞—é—â–∏–π —à–∞–≥
          const result = await this.neuralLite.model.fit(
            [inputTensor, positionTensor], 
            targetTensor,
            {
              epochs: 1,
              batchSize: 1,
              verbose: 0,
              shuffle: true
            }
          );
          
          const loss = result.history.loss[0];
          totalLoss += loss;
          
          if (batchIdx % 5 === 0) {
            process.stdout.write(`‚ö° –ë–∞—Ç—á ${batchIdx + 1}/${inputSequences.length}, Loss: ${loss.toFixed(4)}\r`);
          }
          
        } finally {
          inputTensor.dispose();
          targetTensor.dispose();
          positionTensor.dispose();
        }
      }
      
      const avgLoss = totalLoss / inputSequences.length;
      console.log(`\n‚úÖ –≠–ø–æ—Ö–∞ ${epoch + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–µ–¥–Ω–∏–π Loss: ${avgLoss.toFixed(4)}`);
      
      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏
      if ((epoch + 1) % 3 === 0) {
        console.log('\nüß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
        await this.testGeneration();
      }
    }

    console.log('\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    await this.neuralLite.saveModel();
    console.log('üíæ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  }

  async testGeneration() {
    const testInputs = ['–ü—Ä–∏–≤–µ—Ç', '–ß—Ç–æ —É–º–µ–µ—à—å', '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É'];
    
    for (const input of testInputs) {
      try {
        const response = await this.neuralLite.generateResponse(input, {
          maxTokens: 20,
          temperature: 0.7
        });
        console.log(`  "${input}" ‚Üí "${response}"`);
      } catch (error) {
        console.log(`  "${input}" ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }

  async run() {
    try {
      await this.initialize();
      this.prepareTrainingData();
      await this.trainModel();
      
      console.log('\nüöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:');
      await this.testGeneration();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
if (require.main === module) {
  const trainer = new NeuralLiteTrainer();
  trainer.run().then(() => {
    console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    process.exit(1);
  });
}

module.exports = { NeuralLiteTrainer };