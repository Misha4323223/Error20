/**
 * üß™ –¢–ï–°–¢ –û–¢–°–£–¢–°–¢–í–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û UPGRADE
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ full —Ä–µ–∂–∏–º
 */

const http = require('http');

async function testNoAutoUpgrade() {
  console.log('üß™ –¢–ï–°–¢ –û–¢–°–£–¢–°–¢–í–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û UPGRADE');
  console.log('=========================================');

  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    const initialStatus = await makeRequest('/api/neural/status');
    const initialStats = await makeRequest('/api/neural/stats');
    
    console.log(`  –ù–∞—á–∞–ª—å–Ω—ã–π Status: ${initialStatus.status}`);
    console.log(`  –ù–∞—á–∞–ª—å–Ω—ã–π Stats: ${initialStats.mode || initialStats.neuralMode}`);
    
    if (initialStatus.status !== 'lite' || (initialStats.mode || initialStats.neuralMode) !== 'lite') {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤ —á–µ—Å—Ç–Ω–æ–º lite —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ');
      return { success: false, message: 'System not honest initially' };
    }
    
    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å auto-upgrade)
    console.log('\n2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç (—Ä–∞–Ω—å—à–µ –∑–∞–ø—É—Å–∫–∞–ª –∞–≤—Ç–æupgrade)...');
    const chatResponse = await makePostRequest('/api/ai/chat', {
      message: '–ü—Ä–∏–≤–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ',
      sessionId: 'test-auto-upgrade-' + Date.now()
    });
    
    console.log(`  –ß–∞—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${chatResponse.reply ? '–¥–∞' : '–Ω–µ—Ç'}`);
    console.log(`  –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${chatResponse.reply?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –®–∞–≥ 3: –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æupgrade (—Ä–∞–Ω—å—à–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª —á–µ—Ä–µ–∑ 1-2 —Å–µ–∫)
    console.log('\n3. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–≤—Ç–æupgrade (5 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ full
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æupgrade –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª...');
    const finalStatus = await makeRequest('/api/neural/status');
    const finalStats = await makeRequest('/api/neural/stats');
    
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π Status: ${finalStatus.status}`);
    console.log(`  –§–∏–Ω–∞–ª—å–Ω—ã–π Stats: ${finalStats.mode || finalStats.neuralMode}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const stayedHonest = finalStatus.status === 'lite' && (finalStats.mode || finalStats.neuralMode) === 'lite';
    const noAutoUpgrade = initialStatus.status === finalStatus.status;
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –ê–í–¢–ûUPGRADE:');
    if (stayedHonest && noAutoUpgrade) {
      console.log('‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upgrade –æ—Ç–∫–ª—é—á–µ–Ω!');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —á–µ—Å—Ç–Ω–æ–º lite —Ä–µ–∂–∏–º–µ');
      console.log('‚úÖ –ù–∏–∫–∞–∫–∏—Ö –ª–æ–∂–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π –æ full —Ä–µ–∂–∏–º–µ');
      console.log('‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç upgrade');
      
      return {
        success: true,
        message: 'Auto-upgrade successfully disabled',
        initialMode: initialStatus.status,
        finalMode: finalStatus.status,
        chatWorking: !!chatResponse.reply
      };
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upgrade –≤—Å–µ –µ—â–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç');
      console.log(`‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${initialStatus.status} ‚Üí ${finalStatus.status}`);
      
      return {
        success: false,
        message: 'Auto-upgrade still active',
        initialMode: initialStatus.status,
        finalMode: finalStatus.status,
        unexpectedChange: initialStatus.status !== finalStatus.status
      };
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æupgrade: ${error.message}`);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

function makePostRequest(path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(responseData);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${responseData}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testNoAutoUpgrade()
    .then(result => {
      console.log('\nüèÅ –¢–µ—Å—Ç –∞–≤—Ç–æupgrade –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { testNoAutoUpgrade };