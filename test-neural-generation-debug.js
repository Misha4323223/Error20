/**
 * üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—à–∞–≥–æ–≤–æ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
 */

import fetch from 'node-fetch';

async function testNeuralGeneration() {
    console.log('üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ù–ï–ô–†–û–°–ï–¢–ò');
    console.log('='.repeat(60));
    
    try {
        // 1. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç neural integration
        console.log('\n1. üß† –ü–†–Ø–ú–û–ô –¢–ï–°–¢ NEURAL INTEGRATION:');
        const testResponse = await fetch('http://localhost:5000/api/ai/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                debug: true,
                forceNeuralIntegration: true
            })
        });
        
        const testData = await testResponse.json();
        console.log('   Raw response:', JSON.stringify(testData, null, 2));
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ conversation-engine
        console.log('\n2. ü§ñ –¢–ï–°–¢ CONVERSATION ENGINE:');
        const conversationResponse = await fetch('http://localhost:5000/api/ai/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                message: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
                provider: "ConversationEngine-Semantic",
                debug: true
            })
        });
        
        const conversationData = await conversationResponse.json();
        console.log('   Conversation response:', JSON.stringify(conversationData, null, 2));
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ neural status
        console.log('\n3. üìä –ê–ù–ê–õ–ò–ó NEURAL STATUS:');
        const statusResponse = await fetch('http://localhost:5000/api/neural/status');
        const statusData = await statusResponse.json();
        
        const statsResponse = await fetch('http://localhost:5000/api/neural/stats');
        const statsData = await statsResponse.json();
        
        console.log('   Status declared:', statusData.status);
        console.log('   Stats actual:', statsData.stats?.mode);
        console.log('   Model initialized:', statusData.initialized);
        console.log('   Model layers:', statsData.stats?.layers);
        console.log('   Model parameters:', statsData.stats?.parameters);
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ
        console.log('\n4. üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:');
        const simpleTests = [
            "–ü—Ä–∏–≤–µ—Ç",
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ AI?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≤—ã—à–∏–≤–∫—É"
        ];
        
        for (const test of simpleTests) {
            try {
                const response = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        message: test,
                        timeout: 5000
                    })
                });
                
                const data = await response.json();
                
                console.log(`   "${test}":`, {
                    hasReply: !!data.reply,
                    replyLength: data.reply?.length || 0,
                    provider: data.provider,
                    model: data.model,
                    preview: data.reply?.substring(0, 50) + (data.reply?.length > 50 ? '...' : '')
                });
                
            } catch (error) {
                console.log(`   "${test}": ERROR - ${error.message}`);
            }
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
        console.log('\n5. üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–û–î–ï–õ–ò:');
        try {
            const initResponse = await fetch('http://localhost:5000/api/neural/init-lite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const initData = await initResponse.json();
            console.log('   Init response:', JSON.stringify(initData, null, 2));
            
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const afterInitStatus = await fetch('http://localhost:5000/api/neural/status');
            const afterInitData = await afterInitStatus.json();
            console.log('   Status after init:', afterInitData.status);
            
        } catch (error) {
            console.log('   Init error:', error.message);
        }
        
        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ upgrade
        console.log('\n6. üöÄ –ü–†–û–í–ï–†–ö–ê UPGRADE TO FULL:');
        try {
            const upgradeResponse = await fetch('http://localhost:5000/api/neural/upgrade-to-full', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const upgradeData = await upgradeResponse.json();
            console.log('   Upgrade response:', JSON.stringify(upgradeData, null, 2));
            
            if (upgradeData.success) {
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è upgrade
                await new Promise(resolve => setTimeout(resolve, 10000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–∞—è
                const fullStatusResponse = await fetch('http://localhost:5000/api/neural/status');
                const fullStatusData = await fullStatusResponse.json();
                
                const fullStatsResponse = await fetch('http://localhost:5000/api/neural/stats');
                const fullStatsData = await fullStatsResponse.json();
                
                console.log('   Status after upgrade:', fullStatusData.status);
                console.log('   Stats after upgrade:', fullStatsData.stats?.mode);
                console.log('   Layers after upgrade:', fullStatsData.stats?.layers);
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã
                console.log('\n   üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ FULL –ú–û–î–ï–õ–ò:');
                const fullTestResponse = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        message: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–¥—Ä–æ–±–Ω–æ",
                        forceNeuralIntegration: true,
                        debug: true
                    })
                });
                
                const fullTestData = await fullTestResponse.json();
                console.log('   Full model response:', {
                    hasReply: !!fullTestData.reply,
                    replyLength: fullTestData.reply?.length || 0,
                    provider: fullTestData.provider,
                    model: fullTestData.model,
                    preview: fullTestData.reply?.substring(0, 100) + (fullTestData.reply?.length > 100 ? '...' : '')
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                if (fullTestData.reply) {
                    const words = fullTestData.reply.split(' ');
                    const uniqueWords = new Set(words);
                    const repetitionRatio = words.length / uniqueWords.size;
                    
                    console.log('   Quality analysis:', {
                        totalWords: words.length,
                        uniqueWords: uniqueWords.size,
                        repetitionRatio: repetitionRatio.toFixed(2),
                        quality: repetitionRatio < 2 && words.length > 10 ? 'Good' : 'Poor'
                    });
                }
            }
            
        } catch (error) {
            console.log('   Upgrade error:', error.message);
        }
        
        // 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        console.log('\n7. üìù –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
        
        const finalStatusResponse = await fetch('http://localhost:5000/api/neural/status');
        const finalStatusData = await finalStatusResponse.json();
        
        const finalStatsResponse = await fetch('http://localhost:5000/api/neural/stats');
        const finalStatsData = await finalStatsResponse.json();
        
        console.log('   Final status:', finalStatusData.status);
        console.log('   Final mode:', finalStatsData.stats?.mode);
        console.log('   Final layers:', finalStatsData.stats?.layers);
        console.log('   Final parameters:', finalStatsData.stats?.parameters);
        
        // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
        console.log('='.repeat(60));
        
        if (finalStatusData.status === 'full' && finalStatsData.stats?.mode === 'full') {
            console.log('‚úÖ –°–¢–ê–¢–£–°: –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞');
        } else if (finalStatusData.status === 'full' && finalStatsData.stats?.mode === 'lite') {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–ª–µ–Ω full —Å—Ç–∞—Ç—É—Å, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç lite –º–æ–¥–µ–ª—å');
        } else {
            console.log('‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨: –°—Ç–∞—Ç—É—Å—ã –Ω–µ —è—Å–Ω—ã');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNeuralGeneration().catch(console.error);