/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—à–∏–±–∫–∏ "Cannot read properties of undefined" –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
 */

const { performMetaSemanticAnalysis } = require('./server/semantic-integration-layer.cjs');

async function testMetaSemanticFix() {
  console.log('üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê');
  console.log('===============================================');
  
  const testCases = [
    // –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    {
      name: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      query: '—á—Ç–æ —Ç–∞–∫–æ–µ –≥–∏–¥—Ä–æ—Ñ–æ–±–∏—è',
      context: {
        sessionId: 'test-session',
        hasRecentImages: false,
        requestType: 'knowledge_request'
      }
    },
    
    // –¢–µ—Å—Ç 2: –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    {
      name: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
      query: '',
      context: {
        sessionId: 'test-session'
      }
    },
    
    // –¢–µ—Å—Ç 3: Null –∑–∞–ø—Ä–æ—Å
    {
      name: 'Null –∑–∞–ø—Ä–æ—Å',
      query: null,
      context: {
        sessionId: 'test-session'
      }
    },
    
    // –¢–µ—Å—Ç 4: Undefined –∑–∞–ø—Ä–æ—Å
    {
      name: 'Undefined –∑–∞–ø—Ä–æ—Å',
      query: undefined,
      context: {
        sessionId: 'test-session'
      }
    },
    
    // –¢–µ—Å—Ç 5: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    {
      name: '–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
      query: '—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–∫–∞—Ç–∞ –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º',
      context: {
        sessionId: 'test-session',
        hasRecentImages: true,
        requestType: 'image_generation'
      }
    }
  ];
  
  let passedTests = 0;
  let totalTests = testCases.length;
  
  for (const testCase of testCases) {
    try {
      console.log(`\nüß™ –¢–µ—Å—Ç: ${testCase.name}`);
      console.log(`   Query: ${testCase.query || 'null/undefined'}`);
      
      const result = await performMetaSemanticAnalysis(testCase.query, testCase.context);
      
      if (result && typeof result === 'object') {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.shouldUseSemantic ? '—Å–µ–º–∞–Ω—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞' : 'fallback'}`);
        
        if (result.error) {
          console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${result.error}`);
        }
        
        passedTests++;
      } else {
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
        console.log(`   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      console.log(`   üìã –°—Ç–µ–∫:`, error.stack);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
      if (error.message.includes('Cannot read properties of undefined')) {
        console.log(`   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
      } else {
        console.log(`   üìù –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, –æ–∂–∏–¥–∞–µ–º–∞—è`);
        passedTests++; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
      }
    }
  }
  
  console.log('\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
  console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passedTests / totalTests) * 100)}%`);
  
  if (passedTests === totalTests) {
    console.log('   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!');
    return true;
  } else {
    console.log('   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testMetaSemanticFix()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = {
  testMetaSemanticFix
};