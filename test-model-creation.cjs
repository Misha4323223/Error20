/**
 * üß† –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –ù–ê –î–ò–°–ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É neural-models (256 –ì–ë –¥–∏—Å–∫)
 */

const { BooomerangsNeuralCore } = require('./server/neural-network-core.cjs');
const fs = require('fs');
const path = require('path');

async function testModelCreation() {
  console.log('üöÄ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ï–ô–†–û–ù–ù–û–ô –ú–û–î–ï–õ–ò');
  console.log('=====================================');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ —è–¥—Ä–∞
    const neuralCore = new BooomerangsNeuralCore();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (—Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å)
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ —è–¥—Ä–∞...');
    await neuralCore.initialize();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞
    const stats = neuralCore.getModelStats();
    if (stats) {
      console.log('\n‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏:');
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${stats.totalParams.toLocaleString()}`);
      console.log(`   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.architecture}`);
      console.log(`   - –°–ª–æ–≤–∞—Ä—å: ${stats.vocabSize} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   - –†–∞–∑–º–µ—Ä: ~${stats.memoryEstimate.estimatedMB} –ú–ë`);
      console.log(`   - –°–ª–æ–∏: ${stats.numLayers}`);
      console.log(`   - Embedding: ${stats.embeddingDim}`);
    } else {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫–µ
    console.log('\nüìÇ –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê –î–ò–°–ö–ï:');
    const modelPath = './neural-models/booomerangs-transformer';
    
    if (fs.existsSync(modelPath)) {
      console.log('‚úÖ –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞: ./neural-models/booomerangs-transformer/');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
      const files = fs.readdirSync(modelPath);
      console.log('üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –º–æ–¥–µ–ª–∏:');
      
      let totalSize = 0;
      files.forEach(file => {
        const filePath = path.join(modelPath, file);
        const fileStat = fs.statSync(filePath);
        const fileSizeMB = (fileStat.size / (1024 * 1024)).toFixed(2);
        console.log(`   - ${file}: ${fileSizeMB} –ú–ë`);
        totalSize += fileStat.size;
      });
      
      const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);
      console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ${totalSizeMB} –ú–ë`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
      const requiredFiles = ['model.json', 'weights.bin', 'metadata.json', 'vocabulary.json'];
      const missingFiles = requiredFiles.filter(file => !files.includes(file));
      
      if (missingFiles.length === 0) {
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      } else {
        console.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missingFiles.join(', ')}`);
      }
      
    } else {
      console.log('‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    console.log('\nüíæ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –î–ò–°–ö–ê:');
    const { execSync } = require('child_process');
    const diskUsage = execSync('df -h /home/runner/workspace').toString();
    console.log(diskUsage);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log('\nü§ñ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:');
    try {
      const testInput = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
      console.log(`–í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å: "${testInput}"`);
      
      const response = await neuralCore.generateResponse(testInput, {
        maxTokens: 50,
        temperature: 0.8
      });
      
      console.log(`–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: "${response}"`);
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      
    } catch (genError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', genError.message);
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–∏—Å–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testModelCreation();