/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç conversation engine —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
 */

async function testNeuralConversation() {
  console.log('üß™ –¢–µ—Å—Ç conversation engine —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º neural integration —è–≤–Ω–æ
    const { getGlobalNeuralIntegration, initializeNeuralIntegration } = require('./server/neural-integration.cjs');
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º neural integration...');
    let neuralIntegration = getGlobalNeuralIntegration();
    
    // –ï—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (!neuralIntegration.isInitialized) {
      console.log('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é lite –º–æ–¥–µ–ª–∏...');
      await neuralIntegration.initializeLite();
    }
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:');
    console.log('  Mode:', neuralIntegration.mode);
    console.log('  Initialized:', neuralIntegration.isInitialized);
    console.log('  Current Model:', !!neuralIntegration.getCurrentModel());
    
    // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç generateHybridResponse
    console.log('\nü§ñ –¢–µ—Å—Ç generateHybridResponse...');
    try {
      const hybridResponse = await neuralIntegration.generateHybridResponse('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', {
        maxTokens: 100,
        temperature: 0.8
      });
      
      console.log('‚úÖ Hybrid –æ—Ç–≤–µ—Ç:', hybridResponse);
      console.log('‚úÖ –î–ª–∏–Ω–∞:', hybridResponse?.length || 0);
      
    } catch (hybridError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ hybrid:', hybridError.message);
    }
    
    // –¢–µ—Å—Ç conversation engine
    console.log('\nüí¨ –¢–µ—Å—Ç conversation engine...');
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    const testMessages = [
      '–ü—Ä–∏–≤–µ—Ç!',
      '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?',
      '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞'
    ];
    
    for (const message of testMessages) {
      console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
      
      try {
        const response = await conversationEngine.processUserInput(message, {
          userId: 'test-user',
          sessionId: 'test-session'
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç:', response.reply?.substring(0, 150) + '...');
        console.log('‚úÖ Confidence:', response.confidence);
        console.log('‚úÖ Provider:', response.metadata?.provider || 'unknown');
        console.log('‚úÖ Neural Mode:', response.metadata?.neuralMode || 'none');
        
      } catch (convError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ conversation:', convError.message);
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.error(error.stack);
  }
}

testNeuralConversation().then(() => {
  console.log('\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});