/**
 * üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ï–†–í–ï–†–ê
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

const http = require('http');

// –¢–µ—Å—Ç HTTP API
function testAPI() {
  return new Promise((resolve, reject) => {
    const req = http.get('http://localhost:5000/api/neural/status', (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(data);
          console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', parsed);
          resolve(parsed);
        } catch (error) {
          console.log('‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç (–Ω–µ JSON):', data);
          resolve(data);
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå API –æ—à–∏–±–∫–∞:', error.message);
      reject(error);
    });

    req.setTimeout(5000, () => {
      console.error('‚ùå API —Ç–∞–π–º–∞—É—Ç');
      req.destroy();
      reject(new Error('timeout'));
    });
  });
}

// –¢–µ—Å—Ç WebSocket
function testWebSocket() {
  return new Promise((resolve, reject) => {
    const WebSocket = require('ws');
    const ws = new WebSocket('ws://localhost:5000/api/ws');

    let connected = false;

    ws.on('open', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      connected = true;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ws.send(JSON.stringify({
        type: 'ping',
        timestamp: new Date().toISOString()
      }));
    });

    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data);
        console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        if (message.type === 'connection_established') {
          console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
        }
      } catch (error) {
        console.log('üì® WebSocket –¥–∞–Ω–Ω—ã–µ:', data.toString());
      }
    });

    ws.on('close', () => {
      console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç');
      if (connected) {
        resolve(true);
      } else {
        reject(new Error('WebSocket closed before connecting'));
      }
    });

    ws.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
      reject(error);
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      if (ws.readyState === ws.OPEN) {
        ws.close();
      }
    }, 3000);
  });
}

// –¢–µ—Å—Ç Neural API
function testNeuralInit() {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({});
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: '/api/neural/initialize-lite',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(data);
          console.log('‚úÖ Neural Init —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', parsed);
          resolve(parsed);
        } catch (error) {
          console.log('‚úÖ Neural Init –æ—Ç–≤–µ—Ç:', data);
          resolve(data);
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå Neural Init –æ—à–∏–±–∫–∞:', error.message);
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...\n');

  try {
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API...');
    await testAPI();
    console.log('');

    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket...');
    await testWebSocket();
    console.log('');

    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Neural API...');
    await testNeuralInit();
    console.log('');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  runTests();
}

module.exports = { testAPI, testWebSocket, testNeuralInit };