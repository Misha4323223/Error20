const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');

async function checkNeuralReality() {
  console.log('üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ï–ô–†–û–°–ï–¢–ò');
  console.log('='.repeat(60));

  const neuralIntegration = getGlobalNeuralIntegration();

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  console.log('üìä –ó–ê–Ø–í–õ–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:');
  console.log('- mode:', neuralIntegration.mode);
  console.log('- isInitialized:', neuralIntegration.isInitialized);
  console.log('');

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
  console.log('üß† –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô:');

  if (neuralIntegration.neuralCore) {
    console.log('‚úÖ neuralCore —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('  - model —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!neuralIntegration.neuralCore.model);
    console.log('  - isInitialized:', neuralIntegration.neuralCore.isInitialized);

    if (neuralIntegration.neuralCore.model) {
      try {
        const stats = neuralIntegration.neuralCore.getModelStats();
        console.log('  - numLayers:', stats.numLayers);
        console.log('  - totalParams:', stats.totalParams);
        console.log('  - vocabSize:', stats.vocabSize);
        console.log('  - architecture:', stats.architecture);
      } catch (error) {
        console.log('  - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ FULL:', error.message);
      }
    }
  } else {
    console.log('‚ùå neuralCore –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }

  if (neuralIntegration.neuralLite) {
    console.log('‚úÖ neuralLite —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('  - model —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!neuralIntegration.neuralLite.model);
    console.log('  - isInitialized:', neuralIntegration.neuralLite.isInitialized);

    if (neuralIntegration.neuralLite.model) {
      try {
        const stats = neuralIntegration.neuralLite.getModelStats();
        console.log('  - numLayers:', stats.numLayers);
        console.log('  - totalParams:', stats.totalParams);
        console.log('  - vocabSize:', stats.vocabSize);
        console.log('  - architecture:', stats.architecture);
      } catch (error) {
        console.log('  - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LITE:', error.message);
      }
    }
  } else {
    console.log('‚ùå neuralLite –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }

  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  console.log('');
  console.log('üß™ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:');

  try {
    const currentModel = neuralIntegration.getCurrentModel();
    if (currentModel) {
      console.log('‚úÖ getCurrentModel() —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('  - –¢–∏–ø –º–æ–¥–µ–ª–∏:', currentModel.constructor.name);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      const testResponse = await currentModel.generateResponse('–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞', {
        maxTokens: 20,
        temperature: 0.7
      });

      console.log('  - –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:', `"${testResponse}"`);
      console.log('  - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', testResponse.length);
      console.log('  - –í—ã–≥–ª—è–¥–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ:', testResponse.includes(' ') && testResponse.length > 20);

    } else {
      console.log('‚ùå getCurrentModel() –≤–µ—Ä–Ω—É–ª null');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
  console.log('');
  console.log('üìö –ü–†–û–í–ï–†–ö–ê –°–õ–û–í–ê–†–ï–ô:');

  try {
    const currentModel = neuralIntegration.getCurrentModel();
    if (currentModel) {
      console.log('  - vocabSize:', currentModel.vocabSize);
      console.log('  - vocabulary size:', currentModel.vocabulary?.size || 'N/A');
      console.log('  - reverseVocabulary size:', currentModel.reverseVocabulary?.size || 'N/A');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
      if (currentModel.reverseVocabulary) {
        console.log('  - –ü–µ—Ä–≤—ã–µ —Ç–æ–∫–µ–Ω—ã:');
        for (let i = 0; i < Math.min(10, currentModel.reverseVocabulary.size); i++) {
          const word = currentModel.reverseVocabulary.get(i);
          console.log(`    ${i}: "${word}"`);
        }
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π:', error.message);
  }

  // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
  console.log('');
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:');

  const actualModel = neuralIntegration.getCurrentModel();
  const realModelType = actualModel?.constructor.name || 'unknown';
  const realLayers = actualModel?.numLayers || 0;
  const realParams = actualModel?.model?.countParams?.() || 0;

  console.log(`  - –†–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${realModelType}`);
  console.log(`  - –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏: ${realLayers}`);
  console.log(`  - –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${realParams}`);

  if (realModelType.includes('Lite') || realLayers === 3) {
    console.log('  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–ª–µ–Ω FULL, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç LITE!');
  } else if (realLayers === 12 && realParams > 100000000) {
    console.log('  ‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FULL –º–æ–¥–µ–ª—å');
    console.log('  üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–¥–µ—Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏');
  } else {
    console.log('  ‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  }
}

checkNeuralReality().catch(console.error);