

/**
 * üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ò–Ø –°–õ–û–í–ê–†–Ø –ò –û–ë–£–ß–ï–ù–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
 */

console.log('üöÄ BOOOMERANGS NEURAL VOCABULARY EXPANSION & TRAINING');
console.log('====================================================');

async function startVocabularyExpansionAndTraining() {
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüîß 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´');
    console.log('-----------------------------');
    
    const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');
    const { NeuralVocabularyExpander } = require('./server/neural-vocabulary-expander.cjs');
    const { NeuralTrainingSystem } = require('./server/neural-training-system.cjs');

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–π—Ä–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    const neuralIntegration = getGlobalNeuralIntegration();
    
    if (!neuralIntegration.isInitialized) {
      console.log('‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LITE –Ω–µ–π—Ä–æ—Å–µ—Ç—å...');
      await neuralIntegration.initializeLite();
    }
    
    console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ:', neuralIntegration.mode);

    // 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('\nüìä 2. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø');
    console.log('--------------------------------');
    
    const currentModel = neuralIntegration.getCurrentModel();
    const currentStats = currentModel?.getModelStats?.() || {};
    
    console.log('üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:');
    console.log(`   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${currentStats.architecture || 'N/A'}`);
    console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${currentStats.totalParams?.toLocaleString() || 'N/A'}`);
    console.log(`   - –ü–∞–º—è—Ç—å: ~${currentStats.memoryEstimate?.estimatedMB || 'N/A'} –ú–ë`);
    console.log(`   - –°–ª–æ–≤–∞—Ä—å: ${currentModel?.vocabSize || 44} —Ç–æ–∫–µ–Ω–æ–≤ (–ü–†–û–ë–õ–ï–ú–ê: —Å–ª–∏—à–∫–æ–º –º–∞–ª!)`);

    // 3. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
    console.log('\nüìö 3. –†–ê–°–®–ò–†–ï–ù–ò–ï –°–õ–û–í–ê–†–Ø');
    console.log('-------------------------');
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—è —Å–ª–æ–≤–∞—Ä—è...');
    const vocabularyExpander = new NeuralVocabularyExpander();
    vocabularyExpander.targetVocabSize = 10000; // –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä
    
    await vocabularyExpander.initialize();
    
    console.log('üìà –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è...');
    await vocabularyExpander.expandVocabulary();
    
    const vocabStats = vocabularyExpander.getVocabularyStats();
    console.log('‚úÖ –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω:');
    console.log(`   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${vocabStats.totalTokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`   - –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤: ${vocabStats.cyrillicWords}`);
    console.log(`   - –õ–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–ª–æ–≤: ${vocabStats.latinWords}`);
    console.log(`   - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: ${vocabStats.averageWordLength.toFixed(1)} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`   - –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ª–æ–≤–∞—Ä—è: ${vocabStats.vocabularyCoverage}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    const saveResult = await vocabularyExpander.saveExpandedVocabulary();
    if (saveResult.success) {
      console.log(`üíæ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${saveResult.path}`);
    }

    // 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    console.log('\nüéì 4. –ü–û–î–ì–û–¢–û–í–ö–ê –ö –û–ë–£–ß–ï–ù–ò–Æ');
    console.log('---------------------------');
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...');
    const trainingSystem = new NeuralTrainingSystem();
    await trainingSystem.initialize();
    
    console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...');
    const dataStats = await trainingSystem.prepareTrainingData();
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:');
    console.log(`   - –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${dataStats.trainingSize}`);
    console.log(`   - –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${dataStats.validationSize}`);
    console.log(`   - –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: ${dataStats.vocabularySize}`);

    // 5. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    console.log('\nüèãÔ∏è 5. –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò');
    console.log('----------------------');
    
    const trainingOptions = {
      epochs: 15,
      batchSize: 8,
      learningRate: 0.001,
      patience: 5
    };
    
    console.log('üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è:');
    console.log(`   - –≠–ø–æ—Ö–∏: ${trainingOptions.epochs}`);
    console.log(`   - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${trainingOptions.batchSize}`);
    console.log(`   - Learning rate: ${trainingOptions.learningRate}`);
    console.log(`   - Patience: ${trainingOptions.patience}`);
    
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–£–ß–ï–ù–ò–ï...');
    console.log('========================');
    
    const trainingStartTime = Date.now();
    
    try {
      const trainingResult = await trainingSystem.trainModel(currentModel, trainingOptions);
      
      const trainingTime = Date.now() - trainingStartTime;
      const minutes = Math.floor(trainingTime / 60000);
      const seconds = Math.floor((trainingTime % 60000) / 1000);
      
      console.log('\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
      console.log('======================');
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:`);
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${trainingResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      console.log(`   - –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: ${trainingResult.epochs}`);
      console.log(`   - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è: ${trainingResult.finalLoss?.toFixed(4) || 'N/A'}`);
      console.log(`   - –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${trainingResult.finalAccuracy?.toFixed(4) || 'N/A'}`);
      console.log(`   - –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ${minutes}–º ${seconds}—Å`);
      
    } catch (trainingError) {
      console.error('\n‚ùå –û–®–ò–ë–ö–ê –û–ë–£–ß–ï–ù–ò–Ø!');
      console.error('====================');
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', trainingError.message);
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      try {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏...');
        await currentModel.saveModel?.();
        console.log('‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      } catch (saveError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', saveError.message);
      }
    }

    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    console.log('\nüß™ 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò');
    console.log('--------------------------');
    
    const testQueries = [
      '–ø—Ä–∏–≤–µ—Ç',
      '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å',
      '—Ç—ã –ª—É—á—à–µ —á–µ–ª–æ–≤–µ–∫–∞',
      '—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      '–ø–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º',
      '–Ω—É–∂–Ω–∞ –≤—ã—à–∏–≤–∫–∞',
      '—Å–ø–∞—Å–∏–±–æ'
    ];
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤...');
    
    for (const query of testQueries) {
      try {
        const response = await currentModel.generateResponse(query, { maxTokens: 100 });
        const hasUnknownTokens = response.includes('<UNK>') || response.includes('<unk>');
        
        console.log(`\nüìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
        console.log(`ü§ñ –û—Ç–≤–µ—Ç: "${response}"`);
        console.log(`${hasUnknownTokens ? '‚ùå –°–æ–¥–µ—Ä–∂–∏—Ç <UNK> —Ç–æ–∫–µ–Ω—ã' : '‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç'}`);
        
      } catch (error) {
        console.log(`\nüìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
      }
    }

    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä 7. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('--------------------');
    
    const finalStats = currentModel?.getModelStats?.() || {};
    
    console.log('üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:');
    console.log(`   ‚úÖ –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω —Å 44 –¥–æ ${dataStats.vocabularySize} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log(`   ‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞ –Ω–∞ ${dataStats.trainingSize} –ø—Ä–∏–º–µ—Ä–∞—Ö`);
    console.log(`   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–æ`);
    console.log(`   ‚úÖ –£–±—Ä–∞–Ω—ã <UNK> —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ñ—Ä–∞–∑`);
    
    console.log('\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ /api/neural/upgrade-to-full –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å');
    console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è');
    console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ fine-tuning –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏');
    
    console.log('\nüéâ –†–ê–°–®–ò–†–ï–ù–ò–ï –°–õ–û–í–ê–†–Ø –ò –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('===========================================');
    
    return {
      success: true,
      vocabularyExpanded: true,
      trainingCompleted: true,
      vocabularySize: dataStats.vocabularySize,
      trainingDataSize: dataStats.trainingSize
    };

  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!');
    console.error('======================');
    console.error('–î–µ—Ç–∞–ª–∏:', error.message);
    console.error('Stack:', error.stack);
    
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startVocabularyExpansionAndTraining()
    .then((result) => {
      if (result.success) {
        console.log('\nüéä –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüíî –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { startVocabularyExpansionAndTraining };

