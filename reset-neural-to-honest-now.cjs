/**
 * üîÑ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –°–ë–†–û–° NEURAL INTEGRATION –ö –ß–ï–°–¢–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const http = require('http');

async function resetNeuralToHonestNow() {
  console.log('üîÑ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –°–ë–†–û–° NEURAL INTEGRATION –ö –ß–ï–°–¢–ù–û–°–¢–ò');
  console.log('================================================');

  try {
    // –®–∞–≥ 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ neural integration –º–æ–¥—É–ª—é
    console.log('\n1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ neural integration...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π neural integration –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');
    const neuralIntegration = getGlobalNeuralIntegration();
    
    if (!neuralIntegration) {
      console.log('‚ùå Neural integration –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { success: false, message: 'Neural integration not found' };
    }
    
    console.log(`  –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${neuralIntegration.mode}`);
    console.log(`  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${neuralIntegration.isInitialized}`);
    
    // –®–∞–≥ 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ —á–µ—Å—Ç–Ω–æ–º—É lite —Å–æ—Å—Ç–æ—è–Ω–∏—é
    console.log('\n2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫ —á–µ—Å—Ç–Ω–æ–º—É lite —Å–æ—Å—Ç–æ—è–Ω–∏—é...');
    
    const currentModel = neuralIntegration.getCurrentModel();
    const modelStats = currentModel?.getModelStats?.();
    const actualLayers = modelStats?.numLayers || 0;
    const actualParams = modelStats?.totalParams || 0;
    
    console.log(`  –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏ –º–æ–¥–µ–ª–∏: ${actualLayers}`);
    console.log(`  –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${actualParams}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    if (actualLayers < 10 || actualParams < 50000000) {
      console.log('  üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode = "lite" (—á–µ—Å—Ç–Ω–æ)');
      neuralIntegration.mode = 'lite';
      neuralIntegration.isInitialized = true;
      
      // –û—á–∏—â–∞–µ–º neuralCore –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª—å—é
      if (neuralIntegration.neuralCore && actualLayers < 10) {
        console.log('  üîß –û—á–∏—â–∞–µ–º –ª–æ–∂–Ω—ã–π neuralCore (–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª—å—é)');
        neuralIntegration.neuralCore = null;
      }
      
      console.log('  ‚úÖ –†–µ–∂–∏–º —á–µ—Å—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ "lite"');
    } else {
      console.log('  ‚úÖ –ú–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º "full"');
    }
    
    // –®–∞–≥ 3: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å manager –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    console.log('\n3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ progress manager...');
    
    if (neuralIntegration.progressManager) {
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—É—é
        neuralIntegration.progressManager.currentOperation = null;
        neuralIntegration.progressManager.status = 'idle';
        neuralIntegration.progressManager.progress = 0;
        
        console.log('  ‚úÖ Progress manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (error) {
        console.log('  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ progress manager:', error.message);
      }
    }
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API...');
    
    const statusAfter = await makeRequest('/api/neural/status');
    const statsAfter = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API: ${statusAfter.status}`);
    console.log(`  Stats API: ${statsAfter.mode || statsAfter.neuralMode}`);
    
    const isNowHonest = statusAfter.status === (statsAfter.mode || statsAfter.neuralMode);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –°–ë–†–û–°–ê:');
    if (isNowHonest) {
      console.log('‚úÖ –£–°–ü–ï–•: Neural integration —á–µ—Å—Ç–Ω–æ —Å–±—Ä–æ—à–µ–Ω!');
      console.log(`‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: "${statusAfter.status}"`);
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Å—Ç–Ω–æ');
      
      return {
        success: true,
        honest: true,
        mode: statusAfter.status,
        layers: actualLayers,
        params: actualParams
      };
    } else {
      console.log('‚ùå –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: API –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      console.log(`‚ùå Status: "${statusAfter.status}" vs Stats: "${statsAfter.mode || statsAfter.neuralMode}"`);
      
      return {
        success: false,
        honest: false,
        mode: statusAfter.status,
        needsTimeToSync: true
      };
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: ${error.message}`);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
if (require.main === module) {
  resetNeuralToHonestNow()
    .then(result => {
      console.log('\nüèÅ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { resetNeuralToHonestNow };