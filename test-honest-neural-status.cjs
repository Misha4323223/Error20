/**
 * üîç –¢–ï–°–¢ –ß–ï–°–¢–ù–û–°–¢–ò NEURAL STATUS API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ lite/full —Ä–µ–∂–∏–º–∞
 */

const http = require('http');

async function testHonestNeuralStatus() {
  console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ï–°–¢–ù–û–°–¢–ò NEURAL STATUS API');
  console.log('==========================================');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/neural/status
    console.log('\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/neural/status');
    const statusResponse = await makeRequest('/api/neural/status');
    
    console.log('üìä Neural Status Response:');
    console.log(`  Status: ${statusResponse.status}`);
    console.log(`  Message: ${statusResponse.message}`);
    console.log(`  Progress: ${statusResponse.progress}%`);
    console.log(`  Success: ${statusResponse.success}`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/neural/stats
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/neural/stats');
    const statsResponse = await makeRequest('/api/neural/stats');
    
    console.log('üìä Neural Stats Response:');
    console.log(`  Mode: ${statsResponse?.neuralMode || 'unknown'}`);
    console.log(`  Model: ${statsResponse?.modelName || 'unknown'}`);
    console.log(`  Parameters: ${statsResponse?.parameters || 'unknown'}`);
    console.log(`  Layers: ${statsResponse?.layers || 'unknown'}`);

    // –ê–Ω–∞–ª–∏–∑ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –ß–ï–°–¢–ù–û–°–¢–ò:');
    
    const statusMode = statusResponse.status;
    const statsMode = statsResponse?.neuralMode || statsResponse?.mode;
    
    if (statusMode === statsMode) {
      console.log(`‚úÖ –ß–ï–°–¢–ù–û–°–¢–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –û–±–∞ API —Å–æ–æ–±—â–∞—é—Ç —Ä–µ–∂–∏–º "${statusMode}"`);
    } else {
      console.log(`‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û:`);
      console.log(`   /api/neural/status: "${statusMode}"`);
      console.log(`   /api/neural/stats: "${statsMode}"`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ false claims
    if (statusMode === 'full' && (!statsResponse || statsResponse.layers < 12)) {
      console.log('‚ùå –õ–û–ñ–ù–û–ï –ó–ê–Ø–í–õ–ï–ù–ò–ï: Status —Å–æ–æ–±—â–∞–µ—Ç "full", –Ω–æ —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç < 12 —Å–ª–æ–µ–≤');
    } else if (statusMode === 'lite' && statsResponse?.layers >= 12) {
      console.log('‚ùå –õ–û–ñ–ù–û–ï –ó–ê–Ø–í–õ–ï–ù–ò–ï: Status —Å–æ–æ–±—â–∞–µ—Ç "lite", –Ω–æ —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç >= 12 —Å–ª–æ–µ–≤');
    } else {
      console.log('‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –ó–∞—è–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º');
    }

    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:');
    const isHonest = statusMode === statsMode;
    console.log(`–°–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–∞: ${isHonest ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${statusMode}`);
    
    return {
      isHonest,
      statusMode,
      statsMode,
      statusResponse,
      statsResponse
    };

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`);
    return { error: error.message };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testHonestNeuralStatus()
    .then(result => {
      console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { testHonestNeuralStatus };