

/**
 * üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –í–°–ï–• –ù–ï–ô–†–û–°–ï–¢–ï–í–´–• –ó–ê–î–ê–ß
 * –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏ –æ–±—É—á–µ–Ω–∏–µ 12-—Å–ª–æ–π–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ BOOOMERANGS: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –ù–ï–ô–†–û–°–ï–¢–ï–í–´–• –ó–ê–î–ê–ß');
console.log('==================================================');

async function startBothNeuralTasks() {
  try {
    console.log('üî• –ó–∞–ø—É—Å–∫–∞–µ–º –û–ë–ê –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∏ –æ–±—É—á–µ–Ω–∏–µ LITE
    const vocabularyProcess = spawn('node', ['start-vocabulary-expansion.cjs'], {
      stdio: 'inherit',
      cwd: process.cwd()
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ 12-—Å–ª–æ–π–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    const neuralTrainingProcess = spawn('node', ['start-neural-training.cjs'], {
      stdio: 'inherit', 
      cwd: process.cwd()
    });

    console.log('üìä –ü—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:');
    console.log(`   üß† –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è (PID: ${vocabularyProcess.pid})`);
    console.log(`   üî• –û–±—É—á–µ–Ω–∏–µ 12-—Å–ª–æ–π–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (PID: ${neuralTrainingProcess.pid})`);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    const processPromises = [
      new Promise((resolve, reject) => {
        vocabularyProcess.on('exit', (code) => {
          if (code === 0) {
            console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            resolve({ task: 'vocabulary', success: true });
          } else {
            console.log('‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π');
            reject({ task: 'vocabulary', success: false, code });
          }
        });
        
        vocabularyProcess.on('error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è:', error);
          reject({ task: 'vocabulary', error });
        });
      }),

      new Promise((resolve, reject) => {
        neuralTrainingProcess.on('exit', (code) => {
          if (code === 0) {
            console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ 12-—Å–ª–æ–π–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            resolve({ task: 'neural-training', success: true });
          } else {
            console.log('‚ùå –û–±—É—á–µ–Ω–∏–µ 12-—Å–ª–æ–π–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π');
            reject({ task: 'neural-training', success: false, code });
          }
        });

        neuralTrainingProcess.on('error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
          reject({ task: 'neural-training', error });
        });
      })
    ];

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á...');
    const results = await Promise.allSettled(processPromises);

    console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('=================');

    let successCount = 0;
    results.forEach((result, index) => {
      const taskName = index === 0 ? '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è' : '–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏';
      
      if (result.status === 'fulfilled') {
        console.log(`‚úÖ ${taskName}: –£–°–ü–ï–®–ù–û`);
        successCount++;
      } else {
        console.log(`‚ùå ${taskName}: –û–®–ò–ë–ö–ê`, result.reason);
      }
    });

    if (successCount === 2) {
      console.log('\nüéä –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('üìà –ù–µ–π—Ä–æ—Å–µ—Ç—å BOOOMERANGS –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º');
      process.exit(0);
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
      process.exit(1);
    }

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startBothNeuralTasks().catch(console.error);
}

module.exports = { startBothNeuralTasks };

