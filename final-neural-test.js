/**
 * üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ full –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

import fetch from 'node-fetch';

async function finalNeuralTest() {
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï–ô–†–û–°–ï–¢–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
    console.log('='.repeat(60));
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        console.log('\n1. üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ù–ï–ô–†–û–°–ï–¢–ò:');
        const statusResponse = await fetch('http://localhost:5000/api/neural/status');
        const statusData = await statusResponse.json();
        
        const statsResponse = await fetch('http://localhost:5000/api/neural/stats');
        const statsData = await statsResponse.json();
        
        console.log('   Status API:', statusData.status);
        console.log('   Stats API:', statsData.stats?.mode);
        console.log('   Initialized:', statusData.initialized);
        console.log('   Layers:', statsData.stats?.layers);
        console.log('   Parameters:', statsData.stats?.parameters?.toLocaleString());
        
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        console.log('\n2. üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–´–• –ó–ê–ü–†–û–°–û–í:');
        const simpleTests = [
            { query: "–ü—Ä–∏–≤–µ—Ç", expected: "greeting" },
            { query: "–ö–∞–∫ –¥–µ–ª–∞?", expected: "casual" },
            { query: "–°–ø–∞—Å–∏–±–æ", expected: "gratitude" }
        ];
        
        for (const test of simpleTests) {
            try {
                const response = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: test.query })
                });
                
                const data = await response.json();
                
                console.log(`   "${test.query}":`);
                console.log(`     Response: ${data.response ? data.response.substring(0, 60) + '...' : 'EMPTY'}`);
                console.log(`     Provider: ${data.provider}`);
                console.log(`     Neural Mode: ${data.metadata?.neuralMode}`);
                console.log(`     Layers: ${data.metadata?.layersUsed}`);
                console.log(`     Quality: ${data.response && !data.response.includes('[object Object]') ? 'GOOD' : 'BAD'}`);
                
            } catch (error) {
                console.log(`   "${test.query}": ERROR - ${error.message}`);
            }
        }
        
        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        console.log('\n3. üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–ñ–ù–´–• –ó–ê–ü–†–û–°–û–í:');
        const complexTests = [
            { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", category: "AI" },
            { query: "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤—ã—à–∏–≤–∫–∞?", category: "Embroidery" },
            { query: "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", category: "Science" }
        ];
        
        for (const test of complexTests) {
            try {
                const response = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: test.query })
                });
                
                const data = await response.json();
                
                console.log(`   "${test.query}":`);
                console.log(`     Response: ${data.response ? data.response.substring(0, 80) + '...' : 'EMPTY'}`);
                console.log(`     Has [object Object]: ${data.response?.includes('[object Object]') ? 'YES (BAD)' : 'NO (GOOD)'}`);
                console.log(`     Provider: ${data.provider}`);
                console.log(`     Neural Mode: ${data.metadata?.neuralMode}`);
                console.log(`     Layers: ${data.metadata?.layersUsed}`);
                console.log(`     Response Length: ${data.response?.length || 0} chars`);
                
            } catch (error) {
                console.log(`   "${test.query}": ERROR - ${error.message}`);
            }
        }
        
        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lite –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        console.log('\n4. üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø LITE –ú–û–î–ï–õ–ò:');
        try {
            const initResponse = await fetch('http://localhost:5000/api/neural/init-lite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const initData = await initResponse.json();
            console.log('   Init response:', initData.success ? 'SUCCESS' : 'FAILED');
            
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 8000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const afterInitStatus = await fetch('http://localhost:5000/api/neural/status');
            const afterInitData = await afterInitStatus.json();
            
            const afterInitStats = await fetch('http://localhost:5000/api/neural/stats');
            const afterInitStatsData = await afterInitStats.json();
            
            console.log('   Status after init:', afterInitData.status);
            console.log('   Mode after init:', afterInitStatsData.stats?.mode);
            console.log('   Layers after init:', afterInitStatsData.stats?.layers);
            
        } catch (error) {
            console.log('   Init error:', error.message);
        }
        
        // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º lite –º–æ–¥–µ–ª—å
        console.log('\n5. üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LITE –ú–û–î–ï–õ–ò:');
        const liteResponse = await fetch('http://localhost:5000/api/ai/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?" })
        });
        
        const liteData = await liteResponse.json();
        console.log('   Lite response:', liteData.response ? liteData.response.substring(0, 60) + '...' : 'EMPTY');
        console.log('   Neural mode:', liteData.metadata?.neuralMode);
        console.log('   Layers:', liteData.metadata?.layersUsed);
        console.log('   Quality:', liteData.response && !liteData.response.includes('[object Object]') ? 'GOOD' : 'BAD');
        
        // 6. –ü—Ä–æ–±—É–µ–º upgrade to full
        console.log('\n6. üöÄ UPGRADE TO FULL:');
        try {
            const upgradeResponse = await fetch('http://localhost:5000/api/neural/upgrade-to-full', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const upgradeData = await upgradeResponse.json();
            console.log('   Upgrade response:', upgradeData.success ? 'SUCCESS' : 'FAILED');
            
            if (upgradeData.success) {
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è upgrade
                await new Promise(resolve => setTimeout(resolve, 15000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ upgrade
                const finalStatus = await fetch('http://localhost:5000/api/neural/status');
                const finalStatusData = await finalStatus.json();
                
                const finalStats = await fetch('http://localhost:5000/api/neural/stats');
                const finalStatsData = await finalStats.json();
                
                console.log('   Status after upgrade:', finalStatusData.status);
                console.log('   Mode after upgrade:', finalStatsData.stats?.mode);
                console.log('   Layers after upgrade:', finalStatsData.stats?.layers);
                
                // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç full –º–æ–¥–µ–ª–∏
                console.log('\n7. üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ FULL –ú–û–î–ï–õ–ò:');
                const fullTestResponse = await fetch('http://localhost:5000/api/ai/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ" })
                });
                
                const fullTestData = await fullTestResponse.json();
                console.log('   Full response:', fullTestData.response ? fullTestData.response.substring(0, 100) + '...' : 'EMPTY');
                console.log('   Has [object Object]:', fullTestData.response?.includes('[object Object]') ? 'YES (BAD)' : 'NO (GOOD)');
                console.log('   Neural mode:', fullTestData.metadata?.neuralMode);
                console.log('   Layers:', fullTestData.metadata?.layersUsed);
                console.log('   Provider:', fullTestData.metadata?.provider);
                console.log('   Response length:', fullTestData.response?.length || 0);
                
                // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                if (fullTestData.response) {
                    const words = fullTestData.response.split(' ');
                    const uniqueWords = new Set(words);
                    const repetitionRatio = words.length / uniqueWords.size;
                    
                    console.log('   Quality metrics:');
                    console.log('     Total words:', words.length);
                    console.log('     Unique words:', uniqueWords.size);
                    console.log('     Repetition ratio:', repetitionRatio.toFixed(2));
                    console.log('     Overall quality:', 
                        !fullTestData.response.includes('[object Object]') && 
                        repetitionRatio < 3 && 
                        words.length > 20 ? 'EXCELLENT' : 'NEEDS IMPROVEMENT');
                }
            }
            
        } catch (error) {
            console.log('   Upgrade error:', error.message);
        }
        
        // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        console.log('\n8. üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:');
        console.log('='.repeat(60));
        
        // –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        const verdictStatus = await fetch('http://localhost:5000/api/neural/status');
        const verdictStatusData = await verdictStatus.json();
        
        const verdictStats = await fetch('http://localhost:5000/api/neural/stats');
        const verdictStatsData = await verdictStats.json();
        
        console.log('   Final Status API:', verdictStatusData.status);
        console.log('   Final Stats API:', verdictStatsData.stats?.mode);
        console.log('   Final Layers:', verdictStatsData.stats?.layers);
        console.log('   Final Parameters:', verdictStatsData.stats?.parameters?.toLocaleString());
        
        if (verdictStatusData.status === 'full' && verdictStatsData.stats?.mode === 'full' && verdictStatsData.stats?.layers === 12) {
            console.log('   üéâ –í–ï–†–î–ò–ö–¢: –ü–û–õ–ù–ê–Ø –ú–û–î–ï–õ–¨ –ê–ö–¢–ò–í–ù–ê –ò –†–ê–ë–û–¢–ê–ï–¢!');
        } else if (verdictStatusData.status === 'full' && verdictStatsData.stats?.mode === 'lite') {
            console.log('   ‚ö†Ô∏è  –í–ï–†–î–ò–ö–¢: –ó–ê–Ø–í–õ–ï–ù FULL –°–¢–ê–¢–£–°, –ù–û –†–ê–ë–û–¢–ê–ï–¢ LITE –ú–û–î–ï–õ–¨');
        } else {
            console.log('   ‚ùì –í–ï–†–î–ò–ö–¢: –°–¢–ê–¢–£–° –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
finalNeuralTest().catch(console.error);