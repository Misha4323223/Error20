/**
 * üîç –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–°–¢–ò –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - lite –∏–ª–∏ full –≤–µ—Ä—Å–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ES –º–æ–¥—É–ª—è–º–∏
 */

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å require –≤ ES –º–æ–¥—É–ª—è—Ö
const { createRequire } = await import('module');
const require = createRequire(import.meta.url);

async function testNeuralReality() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –ù–ï–ô–†–û–°–ï–¢–ò');
  console.log('='.repeat(50));

  try {
    const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');
    const neuralIntegration = getGlobalNeuralIntegration();

    console.log('üìä –°–¢–ê–¢–£–° –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('- isInitialized:', neuralIntegration.isInitialized);
    console.log('- mode:', neuralIntegration.mode);
    console.log('- upgradeInProgress:', neuralIntegration.upgradeInProgress);
    console.log('- isInitializing:', neuralIntegration.isInitializing);
    console.log('');

    console.log('üìä –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–ï–õ–ï–ô:');
    console.log('- neuralCore exists:', !!neuralIntegration.neuralCore);
    console.log('- neuralCore.model exists:', !!neuralIntegration.neuralCore?.model);
    console.log('- neuralCore.isInitialized:', neuralIntegration.neuralCore?.isInitialized);
    console.log('- neuralLite exists:', !!neuralIntegration.neuralLite);
    console.log('- neuralLite.model exists:', !!neuralIntegration.neuralLite?.model);
    console.log('- neuralLite.isInitialized:', neuralIntegration.neuralLite?.isInitialized);
    console.log('');

    console.log('üîß –¢–ï–°–¢ getCurrentModel():');
    const currentModel = neuralIntegration.getCurrentModel();
    console.log('- getCurrentModel() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:', currentModel === neuralIntegration.neuralCore ? 'FULL' : 
                                                  currentModel === neuralIntegration.neuralLite ? 'LITE' : 'NULL');
    console.log('');

    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
    if (currentModel) {
      console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò:');
      try {
        const stats = currentModel.getModelStats();
        console.log('- layers:', stats.layers);
        console.log('- totalParams:', stats.totalParams);
        console.log('- memoryEstimate:', stats.memoryEstimate);
        console.log('- architecture:', stats.architecture);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const realType = stats.totalParams > 10000000 ? 'FULL (>10M params)' : 'LITE (<10M params)';
        console.log('- –†–ï–ê–õ–¨–ù–´–ô –¢–ò–ü:', realType);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ mode –∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        const expectedMode = stats.totalParams > 10000000 ? 'full' : 'lite';
        const isConsistent = neuralIntegration.mode === expectedMode;
        console.log('- –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï MODE:', isConsistent ? '‚úÖ –ö–û–†–†–ï–ö–¢–ù–û' : '‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï');
        
        if (!isConsistent) {
          console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: mode='${neuralIntegration.mode}' –Ω–æ —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å ${realType}`);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      }
    } else {
      console.log('‚ùå –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –ú–û–î–ï–õ–ò');
    }

    console.log('');
    console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É getCurrentModel
    const fullReady = neuralIntegration.neuralCore && neuralIntegration.neuralCore.model && neuralIntegration.neuralCore.isInitialized;
    const liteReady = neuralIntegration.neuralLite && neuralIntegration.neuralLite.model && neuralIntegration.neuralLite.isInitialized;
    
    console.log('- fullReady (–ø–æ –ª–æ–≥–∏–∫–µ getCurrentModel):', fullReady);
    console.log('- liteReady (–ø–æ –ª–æ–≥–∏–∫–µ getCurrentModel):', liteReady);
    
    if (!fullReady && !liteReady) {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û–±–µ –º–æ–¥–µ–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
      if (neuralIntegration.neuralCore) {
        console.log('‚ö†Ô∏è neuralCore —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ:');
        console.log('  - model:', !!neuralIntegration.neuralCore.model);
        console.log('  - isInitialized:', neuralIntegration.neuralCore.isInitialized);
      }
      
      if (neuralIntegration.neuralLite) {
        console.log('‚ö†Ô∏è neuralLite —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ:');
        console.log('  - model:', !!neuralIntegration.neuralLite.model);
        console.log('  - isInitialized:', neuralIntegration.neuralLite.isInitialized);
      }
    }

    console.log('');
    console.log('üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (neuralIntegration.mode === 'full' && !fullReady) {
      console.log('‚ùå –ò–°–ü–†–ê–í–ò–¢–¨: mode="full" –Ω–æ full –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å mode —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º');
    }
    if (neuralIntegration.mode === 'lite' && !liteReady) {
      console.log('‚ùå –ò–°–ü–†–ê–í–ò–¢–¨: mode="lite" –Ω–æ lite –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å lite –º–æ–¥–µ–ª—å');
    }
    if (fullReady && liteReady) {
      console.log('‚úÖ –•–û–†–û–®–û: –û–±–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è full');
    }

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNeuralReality().then(() => {
  console.log('\nüîç –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
}).catch(error => {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
});