/**
 * üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° NEURAL INTEGRATION –ö –ß–ï–°–¢–ù–û–ú–£ –°–û–°–¢–û–Ø–ù–ò–Æ
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∂–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ "full" —Ä–µ–∂–∏–º–µ
 */

const http = require('http');

async function forceHonestNeuralReset() {
  console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° NEURAL INTEGRATION –ö –ß–ï–°–¢–ù–û–°–¢–ò');
  console.log('=====================================================');

  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    const beforeStatus = await makeRequest('/api/neural/status');
    const beforeStats = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API (–ª–æ–∂–Ω—ã–π): ${beforeStatus.status}`);
    console.log(`  Stats API (—á–µ—Å—Ç–Ω—ã–π): ${beforeStats.mode || beforeStats.neuralMode}`);
    
    if (beforeStatus.status === beforeStats.mode) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —á–µ—Å—Ç–Ω–∞, —Å–±—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }
    
    // –®–∞–≥ 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û lite –º–æ–¥–µ–ª—å
    console.log('\n2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏...');
    const initResponse = await makePostRequest('/api/neural/initialize-lite', {});
    
    console.log(`  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite: ${initResponse.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    if (initResponse.message) {
      console.log(`  –°–æ–æ–±—â–µ–Ω–∏–µ: ${initResponse.message}`);
    }
    
    // –®–∞–≥ 3: –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞...');
    const afterStatus = await makeRequest('/api/neural/status');
    const afterStats = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API (–ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞): ${afterStatus.status}`);
    console.log(`  Stats API (–ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞): ${afterStats.mode || afterStats.neuralMode}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const isNowHonest = afterStatus.status === (afterStats.mode || afterStats.neuralMode);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –°–ë–†–û–°–ê:');
    if (isNowHonest) {
      console.log('‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ —á–µ—Å—Ç–Ω–æ–π!');
      console.log(`‚úÖ –û–±–∞ API —Å–æ–æ–±—â–∞—é—Ç: "${afterStatus.status}"`);
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ª–≥–∞—Ç—å');
      console.log(`‚ùå Status: "${afterStatus.status}" vs Stats: "${afterStats.mode || afterStats.neuralMode}"`);
    }
    
    return {
      success: isNowHonest,
      beforeStatus: beforeStatus.status,
      afterStatus: afterStatus.status,
      statsMode: afterStats.mode || afterStats.neuralMode
    };

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: ${error.message}`);
    return { error: error.message };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

function makePostRequest(path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(responseData);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${responseData}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞
if (require.main === module) {
  forceHonestNeuralReset()
    .then(result => {
      console.log('\nüèÅ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { forceHonestNeuralReset };