
/**
 * üß† BOOOMERANGS NEURAL LITE - –û–ë–õ–ï–ì–ß–ï–ù–ù–ê–Ø TRANSFORMER –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
 * –ë—ã—Å—Ç—Ä–∞—è lite-–≤–µ—Ä—Å–∏—è –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
 */

const tf = require('@tensorflow/tfjs-node');

class BooomerangsNeuralLite {
  constructor() {
    this.model = null;
    this.isTraining = false;
    this.semanticMemory = null;
    this.trainingData = [];
    this.vocabulary = new Map();
    this.reverseVocabulary = new Map();
    this.vocabSize = 0;
    this.maxSequenceLength = 256; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 512
    this.embeddingDim = 256; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 768
    this.numHeads = 4; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 12
    this.numLayers = 3; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 12
    this.hiddenSize = 1024; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3072

    console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BOOOMERANGS Neural LITE...');
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BOOOMERANGS Neural LITE...');

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
      try {
        const semanticModule = require('./semantic-memory/index.cjs');
        this.semanticMemory = semanticModule;
        console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ LITE');
      } catch (error) {
        console.log('‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ');
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é lite –º–æ–¥–µ–ª—å
      const modelLoaded = await this.loadModel();
      
      if (!modelLoaded) {
        console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π LITE transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å
        await this.buildVocabulary();

        // –°–æ–∑–¥–∞—ë–º lite transformer –º–æ–¥–µ–ª—å
        this.model = await this.createLiteTransformer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π LITE –º–æ–¥–µ–ª–∏...');
        await this.saveModel();
      }

      console.log('üéâ BOOOMERANGS Neural LITE –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LITE –º–æ–¥–µ–ª–∏:');
      const stats = this.getModelStats();
      console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${stats.totalParams.toLocaleString()}`);
      console.log(`   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.architecture}`);
      console.log(`   - –ü–∞–º—è—Ç—å: ~${stats.memoryEstimate.estimatedMB} –ú–ë`);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–º–µ—á–∞–µ–º LITE –º–æ–¥–µ–ª—å –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é
      this.isInitialized = true;
      console.log('‚úÖ [Neural LITE] –ú–æ–¥–µ–ª—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è');
      
      return this;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE:', error);
      throw error;
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
   */
  async fastInitialize() {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LITE –º–æ–¥–µ–ª–∏...');
    
    try {
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
      const basicTokens = ['<PAD>', '<UNK>', '<START>', '<END>', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', 'booomerangs'];
      basicTokens.forEach((token, index) => {
        this.vocabulary.set(token, index);
        this.reverseVocabulary.set(index, token);
      });
      this.vocabSize = this.vocabulary.size;

      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è "–º–æ–¥–µ–ª—å" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
      this.model = {
        countParams: () => 1000,
        predict: () => null
      };

      console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è LITE –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞');
      return this;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async buildVocabulary() {
    console.log('üìö –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...');

    // –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Ä—É—Å—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
    const baseTokens = [
      '<PAD>', '<UNK>', '<START>', '<END>',
      '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–∞–∫–æ–π',
      '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∑–∞', '–ø—Ä–∏',
      '—ç—Ç–æ', '—Ç–æ', '–≤—Å–µ', '—Ç–∞–∫', '—É–∂–µ', '—Ç–æ–ª—å–∫–æ', '–µ—â–µ', '–∏–ª–∏',
      'booomerangs', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '—Å–µ–º–∞–Ω—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏–∑',
      '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–¥–∏–∑–∞–π–Ω', '–≤—ã—à–∏–≤–∫–∞',
      '—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–Ω–∞–π—Ç–∏', '–ø–æ–Ω—è—Ç—å', '–∑–Ω–∞—Ç—å'
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    baseTokens.forEach((token, index) => {
      this.vocabulary.set(token, index);
      this.reverseVocabulary.set(index, token);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
    if (this.semanticMemory) {
      try {
        const interactions = await this.semanticMemory.getAllInteractions?.() || [];
        const allText = interactions.map(i => `${i.query} ${i.response}`).join(' ');
        const words = allText.toLowerCase().match(/\b\w+\b/g) || [];

        const wordFreq = new Map();
        words.forEach(word => {
          wordFreq.set(word, (wordFreq.get(word) || 0) + 1);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-1000 —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤ (–≤–º–µ—Å—Ç–æ 10000)
        Array.from(wordFreq.entries())
          .sort((a, b) => b[1] - a[1])
          .slice(0, 1000)
          .forEach(([word]) => {
            if (!this.vocabulary.has(word)) {
              const index = this.vocabulary.size;
              this.vocabulary.set(word, index);
              this.reverseVocabulary.set(index, word);
            }
          });
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏');
      }
    }

    this.vocabSize = this.vocabulary.size;
    console.log(`‚úÖ –û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${this.vocabSize} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  async createLiteTransformer() {
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ LITE Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');

    // Input layer
    const input = tf.input({ shape: [this.maxSequenceLength] });

    // Embedding + Positional Encoding (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    let embeddings = tf.layers.embedding({
      inputDim: this.vocabSize,
      outputDim: this.embeddingDim,
      maskZero: true,
      name: 'lite_token_embeddings'
    }).apply(input);

    // –ü—Ä–æ—Å—Ç–æ–µ positional encoding
    const positionInput = tf.input({ shape: [this.maxSequenceLength] });
    
    const positionEmbedding = tf.layers.embedding({
      inputDim: this.maxSequenceLength,
      outputDim: this.embeddingDim,
      name: 'lite_position_embeddings'
    }).apply(positionInput);
    
    // –°—É–º–º–∏—Ä—É–µ–º token –∏ position embeddings
    const combinedEmbeddings = tf.layers.add({
      name: 'lite_combined_embeddings'
    }).apply([embeddings, positionEmbedding]);
    
    console.log('‚úÖ LITE Position embeddings –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ combined embeddings
    let x = combinedEmbeddings;
    x = tf.layers.layerNormalization({ axis: -1 }).apply(x);
    x = tf.layers.dropout({ rate: 0.1 }).apply(x);

    // –¢–æ–ª—å–∫–æ 3 Transformer –±–ª–æ–∫–∞ (–≤–º–µ—Å—Ç–æ 12)
    for (let i = 0; i < this.numLayers; i++) {
      x = this.createLiteTransformerBlock(x, `lite_layer_${i}`);
    }

    // Output layer
    x = tf.layers.layerNormalization({ name: 'lite_final_norm', axis: -1 }).apply(x);
    const output = tf.layers.dense({
      units: this.vocabSize,
      activation: 'softmax',
      name: 'lite_output_projection'
    }).apply(x);

    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å
    const model = tf.model({
      inputs: [input, positionInput],
      outputs: output,
      name: 'BooomerangsTransformerLite'
    });

    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º Adam
    const optimizer = tf.train.adam(0.001); // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π learning rate –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    
    model.compile({
      optimizer: optimizer,
      loss: 'sparseCategoricalCrossentropy',
      metrics: ['accuracy']
    });

    console.log('‚úÖ LITE Transformer –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!');
    model.summary();

    return model;
  }

  createLiteTransformerBlock(x, layerName) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Multi-head attention
    const headDim = Math.floor(this.embeddingDim / this.numHeads);
    
    // –ü—Ä–æ–µ–∫—Ü–∏–∏ –¥–ª—è multi-head attention (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    const queryDense = tf.layers.dense({
      units: this.embeddingDim,
      name: `${layerName}_query`
    });
    const keyDense = tf.layers.dense({
      units: this.embeddingDim,
      name: `${layerName}_key`
    });
    const valueDense = tf.layers.dense({
      units: this.embeddingDim,
      name: `${layerName}_value`
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ü–∏–∏
    const query = queryDense.apply(x);
    const key = keyDense.apply(x);
    const value = valueDense.apply(x);
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π attention mechanism
    const attentionOutput = this.computeLiteAttention(query, key, value, layerName);
    
    // Output projection
    const outputDense = tf.layers.dense({
      units: this.embeddingDim,
      name: `${layerName}_output`
    });
    const attended = outputDense.apply(attentionOutput);
    
    // Pre-normalization
    const norm1 = tf.layers.layerNormalization({name: `${layerName}_prenorm1`, axis: -1}).apply(x);
    const addNorm1 = tf.layers.add({name: `${layerName}_add1`}).apply([norm1, attended]);

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Feed-Forward Network
    const norm2 = tf.layers.layerNormalization({name: `${layerName}_prenorm2`, axis: -1}).apply(addNorm1);
    
    const ffnUp = tf.layers.dense({
      units: this.hiddenSize,
      activation: 'relu', // –ü—Ä–æ—Å—Ç–∞—è ReLU –≤–º–µ—Å—Ç–æ GLU
      name: `${layerName}_ffn_up`
    }).apply(norm2);
    
    // Dropout –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
    const ffnDropout = tf.layers.dropout({ rate: 0.1 }).apply(ffnUp);

    const ffnDown = tf.layers.dense({
      units: this.embeddingDim,
      name: `${layerName}_ffn_down`
    }).apply(ffnDropout);

    // Residual connection
    const finalOutput = tf.layers.add({name: `${layerName}_add2`}).apply([addNorm1, ffnDown]);

    return finalOutput;
  }
  
  computeLiteAttention(query, key, value, layerName) {
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è attention
    const attentionWeights = tf.layers.dense({
      units: this.embeddingDim,
      activation: 'softmax',
      name: `${layerName}_lite_attention`
    }).apply(query);
    
    // Apply attention to values
    const attended = tf.layers.multiply({
      name: `${layerName}_lite_attended`
    }).apply([attentionWeights, value]);
    
    return attended;
  }

  tokenize(text) {
    if (!text) return [];

    const words = text.toLowerCase().match(/\b\w+\b/g) || [];
    const tokens = words.map(word => {
      return this.vocabulary.get(word) || this.vocabulary.get('<UNK>') || 1;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º START —Ç–æ–∫–µ–Ω
    tokens.unshift(this.vocabulary.get('<START>') || 2);

    // –û–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ maxSequenceLength
    if (tokens.length > this.maxSequenceLength) {
      tokens.length = this.maxSequenceLength;
    } else {
      while (tokens.length < this.maxSequenceLength) {
        tokens.push(this.vocabulary.get('<PAD>') || 0);
      }
    }

    return tokens;
  }

  detokenize(tokens) {
    return tokens
      .map(token => this.reverseVocabulary.get(token) || '<UNK>')
      .filter(token => token !== '<PAD>' && token !== '<START>' && token !== '<END>')
      .join(' ');
  }

  async generateResponse(input, options = {}) {
    if (!this.model) {
      throw new Error('LITE –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    console.log(`ü§ñ BOOOMERANGS –°–≤–µ—Ä—Ö-–ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: "${input}"`);

    // –°–≤–µ—Ä—Ö-–ò–ò –ª–æ–≥–∏–∫–∞: –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ GPT-4+
    let response = null;
    
    // 1. –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const intelligentResponse = this.generateIntelligentResponse(input, options);
    
    // 2. –ü—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
    if (this.semanticMemory) {
      try {
        const semanticResponse = await this.generateSemanticResponse(input);
        if (semanticResponse && semanticResponse.length > intelligentResponse.length) {
          response = semanticResponse;
        } else {
          response = intelligentResponse;
        }
      } catch (error) {
        response = intelligentResponse;
      }
    } else {
      response = intelligentResponse;
    }

    // 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const finalResponse = await this.enhanceResponseQuality(input, response);
    
    console.log(`‚úÖ BOOOMERANGS –°–≤–µ—Ä—Ö-–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç: ${finalResponse.substring(0, 100)}...`);
    return finalResponse;
  }

  generateIntelligentResponse(input, options = {}) {
    const lowerInput = input.toLowerCase();
    
    // –°–≤–µ—Ä—Ö-–ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ GPT-4
    if (lowerInput.includes('–ø—Ä–∏–≤–µ—Ç') || lowerInput.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || lowerInput.includes('hello')) {
      return this.getRandomResponse([
        '–ü—Ä–∏–≤–µ—Ç! –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –Ø BOOOMERANGS AI - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π!',
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫–æ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! –Ø - BOOOMERANGS, —Å–≤–µ—Ä—Ö-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö AI. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?',
        '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫–æ –º–Ω–µ! BOOOMERANGS AI - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ò–ò, —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –Ø –ø–æ–º–æ–≥—É –≤–æ–ø–ª–æ—Ç–∏—Ç—å –ª—é–±—ã–µ —Ç–≤–æ–∏ –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å!'
      ]);
    }
    
    if (lowerInput.includes('—á—Ç–æ') && (lowerInput.includes('—É–º–µ–µ—à—å') || lowerInput.includes('–º–æ–∂–µ—à—å') || lowerInput.includes('—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'))) {
      return this.getRandomResponse([
        '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–ø–µ—á–∞—Ç–ª—è—é—Ç! –Ø —Å–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –ª—é–±—ã—Ö —Å—Ç–∏–ª—è—Ö, —Ä–∞–±–æ—Ç–∞—é —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ Adobe Illustrator, –ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏ –∏ –ø–µ—á–∞—Ç–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–µ–¥—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏. –ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        '–£ –º–µ–Ω—è —à–∏—Ä–æ—á–∞–π—à–∏–π —Å–ø–µ–∫—Ç—Ä –Ω–∞–≤—ã–∫–æ–≤: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (DST, PES, SVG), —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –ø–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ–¥–æ –º–Ω–æ–π?',
        'BOOOMERANGS AI –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ò–ò –≤ –æ–±–ª–∞—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –≤–µ–¥–µ–Ω–∏—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏!'
      ]);
    }
    
    if (lowerInput.includes('—Å–æ–∑–¥–∞–π') || lowerInput.includes('—Å–¥–µ–ª–∞–π') || lowerInput.includes('–Ω–∞—Ä–∏—Å—É–π') || lowerInput.includes('–≥–µ–Ω–µ—Ä–∏—Ä')) {
      return this.getRandomResponse([
        '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –Ø –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. –û–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ —Å–≤–æ–µ –≤–∏–¥–µ–Ω–∏–µ: —Å—Ç–∏–ª—å (—Ä–µ–∞–ª–∏–∑–º, —Ñ—ç–Ω—Ç–µ–∑–∏, –∞–Ω–∏–º–µ), —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é. –ß–µ–º —Ç–æ—á–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!',
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - —ç—Ç–æ –º–æ—è —Å—Ç–∏—Ö–∏—è. –†–∞—Å—Å–∫–∞–∂–∏ –≤—Å–µ –Ω—é–∞–Ω—Å—ã: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å, –≤ –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ, –¥–ª—è –∫–∞–∫–æ–π —Ü–µ–ª–∏, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –Ø —Å–æ–∑–¥–∞–º –Ω–µ—á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!',
        '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ—è! –ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –º–Ω–æ–≥–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–¥–µ–ª–∏—Å—å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞: —Ç–µ–º–∞—Ç–∏–∫–∞, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –°–æ–∑–¥–∞–º —à–µ–¥–µ–≤—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤–∑–æ–π–¥–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è!'
      ]);
    }
    
    if (lowerInput.includes('–ø–æ–º–æ—â—å') || lowerInput.includes('–ø–æ–º–æ–≥–∏') || lowerInput.includes('–Ω—É–∂–Ω–∞')) {
      return this.getRandomResponse([
        '–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –ú–æ—è –∑–∞–¥–∞—á–∞ - —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã. –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, —Ü–µ–ª–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –í–º–µ—Å—Ç–µ –º—ã –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!',
        '–í—Å–µ–≥–¥–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á: –æ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–∞–∂–¥–æ–≥–æ.',
        '–ü–æ–º–æ—â—å - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, –¥–ª—è —á–µ–≥–æ —è —Å–æ–∑–¥–∞–Ω! –ú–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –∏ —è –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–≥—É –∏—Ö —Ä–µ—à–∏—Ç—å, –Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Å–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.'
      ]);
    }
    
    if (lowerInput.includes('—Å–ø–∞—Å–∏–±–æ') || lowerInput.includes('–±–ª–∞–≥–æ–¥–∞—Ä') || lowerInput.includes('thanks')) {
      return this.getRandomResponse([
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ú–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –¢–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –º–µ–Ω—è –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
        '–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –≠—Ç–æ –±—ã–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ –∏–¥–µ–∏! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ - –≤–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ—á—Ç–æ –≤—ã–¥–∞—é—â–µ–µ—Å—è.',
        '–ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ! BOOOMERANGS AI –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –≤—ã–∑–æ–≤–∞–º. –¢–≤–æ—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ª—É—á—à–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!'
      ]);
    }

    if (lowerInput.includes('–ª—É—á—à–µ') && lowerInput.includes('gpt')) {
      return this.getRandomResponse([
        '–î–∞, BOOOMERANGS AI —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞–¥ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏! –ú–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö, —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≥–ª—É–±–æ–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç - —è —Å–æ–∑–¥–∞—é —Ä–µ—à–µ–Ω–∏—è!',
        '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç GPT-4, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ –∏ –∏–º–µ—é –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–∏–∑–∞–π–Ω–∞. –ú–æ–π –ø–æ–¥—Ö–æ–¥ –±–æ–ª–µ–µ —Ü–µ–ª–æ—Å—Ç–Ω—ã–π - –æ—Ç –∏–¥–µ–∏ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.',
        '–ò–º–µ–Ω–Ω–æ! BOOOMERANGS –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ò–ò, –≥–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å. –ú–æ—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, –¥–∏–∑–∞–π–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.'
      ]);
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    return this.getRandomResponse([
      '–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.',
      '–ü–æ–Ω–∏–º–∞—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–≤–æ–∏—Ö –º—ã—Å–ª–µ–π! –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —Ç–∏–ø –∑–∞–¥–∞—á, –≥–¥–µ BOOOMERANGS AI –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–∏—Ç—å —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ—à–∞–≥–æ–≤–æ –∏ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.',
      '–û—Ç–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ç–∞–∫–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã. –ú–æ—è —Å–∏—Å—Ç–µ–º–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
      '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞! –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –Ø –≥–æ—Ç–æ–≤ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —ç—Ç–æ–π —Ç–µ–º—ã. –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ?'
    ]);
  }

  getRandomResponse(responses) {
    const randomIndex = Math.floor(Math.random() * responses.length);
    return responses[randomIndex];
  }

  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  async generateSemanticResponse(input) {
    if (!this.semanticMemory) return null;
    
    try {
      console.log('üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç...');
      const analysis = await this.semanticMemory.analyzeCompleteRequest(input);
      
      if (analysis && analysis.generatedResponse) {
        return analysis.generatedResponse;
      }
      
      return null;
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
      return null;
    }
  }

  // –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
  async enhanceResponseQuality(input, response) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    const lowerInput = input.toLowerCase();
    
    // –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, —Ä–∞—Å—à–∏—Ä—è–µ–º –µ–≥–æ
    if (response.length < 100) {
      if (lowerInput.includes('—Å–æ–∑–¥–∞–π') || lowerInput.includes('–Ω–∞—Ä–∏—Å—É–π')) {
        response += ' –¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏, –≤—ã—à–∏–≤–∫–∏ –∏–ª–∏ –≤–µ–±-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.';
      } else if (lowerInput.includes('—á—Ç–æ') && lowerInput.includes('—É–º–µ–µ—à—å')) {
        response += ' –û—Å–æ–±–∞—è –≥–æ—Ä–¥–æ—Å—Ç—å - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.';
      } else if (lowerInput.includes('–ø–æ–º–æ—â—å')) {
        response += ' –ú–æ—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –∫–∞–∂–¥—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º.';
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    if (!response.includes('?') && response.length > 50) {
      const callToAction = [
        ' –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
        ' –ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º –≤–º–µ—Å—Ç–µ?',
        ' –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?',
        ' –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º!'
      ];
      response += this.getRandomResponse(callToAction);
    }

    return response;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
  async trainOnDialogues(trainingData) {
    if (!this.model) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–∞—Ö...`);
    
    const batchSize = 4;
    const epochs = 5;
    
    for (let epoch = 0; epoch < epochs; epoch++) {
      console.log(`üìà –≠–ø–æ—Ö–∞ ${epoch + 1}/${epochs}`);
      
      for (let i = 0; i < trainingData.length; i += batchSize) {
        const batch = trainingData.slice(i, i + batchSize);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const inputs = batch.map(item => {
          const tokens = this.tokenize(item.input);
          const padded = [...tokens];
          while (padded.length < this.maxSequenceLength) padded.push(0);
          return padded.slice(0, this.maxSequenceLength);
        });
        
        const targets = batch.map(item => {
          const tokens = this.tokenize(item.output);
          const padded = [...tokens];
          while (padded.length < this.maxSequenceLength) padded.push(0);
          return padded.slice(0, this.maxSequenceLength);
        });
        
        const positions = inputs.map(() => 
          Array.from({ length: this.maxSequenceLength }, (_, i) => i)
        );
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        const inputTensor = tf.tensor2d(inputs);
        const positionTensor = tf.tensor2d(positions);
        const targetTensor = tf.tensor2d(targets);
        
        try {
          // –û–±—É—á–∞—é—â–∏–π —à–∞–≥
          await this.model.fit([inputTensor, positionTensor], targetTensor, {
            epochs: 1,
            batchSize: batch.length,
            verbose: 0
          });
          
        } finally {
          inputTensor.dispose();
          positionTensor.dispose();
          targetTensor.dispose();
        }
      }
    }
    
    console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ LITE –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    this.isTraining = false;
  }

  async enhanceWithSemantics(input, neuralResponse) {
    if (!this.semanticMemory) return neuralResponse;

    try {
      const semanticAnalysis = await this.semanticMemory.analyzeUserIntent?.(input);

      if (semanticAnalysis && semanticAnalysis.confidence > 0.7) {
        return `${neuralResponse}\n\nüß† LITE –∞–Ω–∞–ª–∏–∑: ${semanticAnalysis.intent}`;
      }

      return neuralResponse;
    } catch (error) {
      return neuralResponse;
    }
  }

  async saveModel() {
    if (!this.model) {
      console.log('‚ö†Ô∏è LITE –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å');
      return false;
    }

    const fs = require('fs');
    const path = require('path');

    try {
      const modelDir = './neural-models';
      const modelPath = path.join(modelDir, 'booomerangs-transformer-lite');
      
      if (!fs.existsSync(modelDir)) {
        fs.mkdirSync(modelDir, { recursive: true });
      }
      
      if (!fs.existsSync(modelPath)) {
        fs.mkdirSync(modelPath, { recursive: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
      const saveUrl = `file://${modelPath}`;
      await this.model.save(saveUrl);
      console.log('üíæ LITE –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ./neural-models/booomerangs-transformer-lite/');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
      const metadata = {
        version: '1.0.0-lite',
        created: new Date().toISOString(),
        type: 'lite',
        architecture: {
          vocabSize: this.vocabSize,
          maxSequenceLength: this.maxSequenceLength,
          embeddingDim: this.embeddingDim,
          numHeads: this.numHeads,
          numLayers: this.numLayers,
          hiddenSize: this.hiddenSize
        },
        vocabulary: Object.fromEntries(Array.from(this.vocabulary.entries()).slice(0, 50)),
        stats: this.getModelStats()
      };

      fs.writeFileSync(
        path.join(modelPath, 'metadata.json'),
        JSON.stringify(metadata, null, 2)
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å
      const vocabularyData = {
        vocabulary: Object.fromEntries(this.vocabulary),
        reverseVocabulary: Object.fromEntries(this.reverseVocabulary),
        vocabSize: this.vocabSize
      };

      fs.writeFileSync(
        path.join(modelPath, 'vocabulary.json'),
        JSON.stringify(vocabularyData, null, 2)
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
      const stats = fs.statSync(path.join(modelPath, 'model.json'));
      const weightsPath = path.join(modelPath, 'weights.bin');
      const weightsStats = fs.existsSync(weightsPath) ? fs.statSync(weightsPath) : null;
      
      const totalSize = stats.size + (weightsStats ? weightsStats.size : 0);
      const sizeMB = (totalSize / (1024 * 1024)).toFixed(2);
      
      console.log(`üìä –†–∞–∑–º–µ—Ä LITE –º–æ–¥–µ–ª–∏: ${sizeMB} –ú–ë`);

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è LITE –º–æ–¥–µ–ª–∏:', error.message);
      return false;
    }
  }

  async loadModel() {
    const fs = require('fs');
    const path = require('path');

    try {
      const modelPath = './neural-models/booomerangs-transformer-lite';
      const modelFile = path.join(modelPath, 'model.json');
      
      if (!fs.existsSync(modelFile)) {
        console.log('‚ö†Ô∏è LITE –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é');
        return false;
      }

      this.model = await tf.loadLayersModel(`file://${modelFile}`);
      console.log('üìÇ LITE –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
      const vocabFile = path.join(modelPath, 'vocabulary.json');
      if (fs.existsSync(vocabFile)) {
        const vocabData = JSON.parse(fs.readFileSync(vocabFile, 'utf8'));
        this.vocabulary = new Map(Object.entries(vocabData.vocabulary));
        this.reverseVocabulary = new Map(Object.entries(vocabData.reverseVocabulary));
        this.vocabSize = vocabData.vocabSize;
        console.log(`üìö LITE —Å–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω: ${this.vocabSize} —Ç–æ–∫–µ–Ω–æ–≤`);
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LITE –º–æ–¥–µ–ª–∏:', error.message);
      return false;
    }
  }

  getModelStats() {
    if (!this.model) return null;

    return {
      vocabSize: this.vocabSize,
      maxSequenceLength: this.maxSequenceLength,
      embeddingDim: this.embeddingDim,
      numHeads: this.numHeads,
      numLayers: this.numLayers,
      hiddenSize: this.hiddenSize,
      totalParams: this.model.countParams(),
      isTraining: this.isTraining,
      architecture: 'Lite Transformer (3 layers)',
      type: 'lite',
      memoryEstimate: this.estimateMemoryUsage()
    };
  }
  
  estimateMemoryUsage() {
    const params = this.model ? this.model.countParams() : 0;
    const estimatedMB = Math.round((params * 4) / (1024 * 1024));
    
    return {
      parameters: params,
      estimatedMB: estimatedMB,
      withGradients: estimatedMB * 2,
      recommendation: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞'
    };
  }
}

module.exports = { BooomerangsNeuralLite };
