/**
 * üîó NEURAL INTEGRATION LAYER
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç transformer –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π BOOOMERANGS
 */

const { BooomerangsNeuralCore } = require('./neural-network-core.cjs');
const { getGlobalProgressManager } = require('./neural-progress-manager.cjs');

class NeuralIntegrationLayer {
  constructor() {
    this.neuralCore = null;
    this.neuralLite = null;
    this.isInitialized = false;
    this.semanticMemory = null;
    this.hybridMode = true; // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ —Å–µ–º–∞–Ω—Ç–∏–∫—É

    // –ù–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    this.mode = 'loading'; // 'lite', 'full', 'loading'
    this.upgradeInProgress = false;
    this.initializationStartTime = Date.now();
    this.isInitializing = false;

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Progress Manager
    this.progressManager = getGlobalProgressManager();

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Memory Monitor
    try {
      const { getGlobalMemoryMonitor } = require('./memory-monitor.cjs');
      this.memoryMonitor = getGlobalMemoryMonitor();
    } catch (error) {
      console.log('‚ö†Ô∏è Memory Monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      this.memoryMonitor = null;
    }
  }

  async initialize() {
    console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤ LITE —Ä–µ–∂–∏–º–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞...');

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LITE –≤–µ—Ä—Å–∏—é
      await this.initializeLite();

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å
      try {
        this.semanticMemory = require('./semantic-memory/index.cjs');
        console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');
      } catch (error) {
        console.log('‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º conversation engine –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      try {
        this.conversationEngine = require('./conversation-engine.cjs');
        console.log('‚úÖ Conversation engine –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');
      } catch (error) {
        console.log('‚ö†Ô∏è Conversation engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      }

      this.isInitialized = true;
      console.log('üéâ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –≤ LITE —Ä–µ–∂–∏–º–µ!');
      console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ upgradeToFull()');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      throw error;
    }
  }

  async initializeLite() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    if (this.isInitialized && this.mode === 'lite' && this.liteModel) {
      console.log('‚ö° LITE –º–æ–¥–µ–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return { 
        success: true, 
        message: 'LITE –º–æ–¥–µ–ª—å —É–∂–µ –≥–æ—Ç–æ–≤–∞', 
        alreadyInitialized: true,
        stats: this.liteModel.getModelStats?.() || null
      };
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    if (this.isInitializing) {
      console.log('‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫
      let attempts = 0;
      while (this.isInitializing && attempts < 300) { // 30 —Å–µ–∫ = 300 * 100–º—Å
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
      }

      if (this.isInitializing) {
        console.log('‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥');
        this.isInitializing = false;
        this.mode = 'loading';
      } else if (this.mode === 'lite') {
        return { success: true, message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è' };
      }
    }

    console.log('‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞...');
    this.mode = 'loading';
    this.isInitializing = true;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const initTimeout = setTimeout(() => {
      if (this.isInitializing) {
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');
        this.isInitializing = false;
        this.mode = 'loading';
      }
    }, 45000); // 45 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const trackingPromise = this.progressManager.trackLiteInitialization(this);

      const { BooomerangsNeuralLite } = require('./neural-network-lite.cjs');
      this.neuralLite = new BooomerangsNeuralLite();
      this.liteModel = this.neuralLite; // Store the lite model instance

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é lite –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞
      const liteModelPath = './neural-models/booomerangs-lite/';
      const fs = require('fs');
      const path = require('path');

      if (fs.existsSync(path.join(liteModelPath, 'model.json'))) {
        console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è LITE –º–æ–¥–µ–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ–º...');
        try {
          await this.neuralLite.loadModel(liteModelPath);
          console.log('‚úÖ LITE –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –¥–∏—Å–∫–∞');
        } catch (loadError) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
          await this.neuralLite.initialize();
        }
      } else {
        console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é LITE –º–æ–¥–µ–ª—å...');
        await this.neuralLite.initialize();
      }

      this.mode = 'lite';
      const initTime = Date.now() - this.initializationStartTime;
      console.log(`‚úÖ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${initTime}–º—Å`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É LITE –º–æ–¥–µ–ª–∏
      const stats = this.neuralLite.getModelStats();
      console.log(`üìä LITE –º–æ–¥–µ–ª—å: ${stats.totalParams.toLocaleString()} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, ~${stats.memoryEstimate.estimatedMB}–ú–ë`);

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
      await trackingPromise;

      this.isInitializing = false;
      clearTimeout(initTimeout);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      this.mode = 'loading';
      this.isInitializing = false;
      clearTimeout(initTimeout);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ throw –¥–ª—è graceful handling
      return {
        success: false,
        error: error.message,
        message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
      };
    } finally {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      if (this.isInitializing) {
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        this.isInitializing = false;
      }
      clearTimeout(initTimeout);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async upgradeToFull() {
    if (this.mode === 'full') {
      console.log('‚úÖ –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å');
      return { success: true, message: 'Already using full model' };
    }

    try {
      this.mode = 'upgrading';
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ Memory Monitor
      const { getGlobalMemoryMonitor } = require('./memory-monitor.cjs');
      const memoryMonitor = getGlobalMemoryMonitor();
      const memoryStatus = memoryMonitor.getCurrentMemoryStatus();

      if (memoryStatus.usagePercent > 0.8) {
        console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏');
        this.mode = 'lite';
        return { success: false, message: 'Insufficient memory for full model' };
      }

      console.log(`üíæ –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ upgrade: ${memoryStatus.usagePercentFormatted}`);

      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –¥–≤–∏–∂–æ–∫
      const { BooomerangsNeuralCore } = require('./neural-network-core.cjs');
      const fullCore = new BooomerangsNeuralCore();

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
      if (this.progressManager) {
        this.progressManager.updateProgress(10, '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
        this.progressManager.updateProgress(25, '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏...');
        this.progressManager.updateProgress(40, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 12-—Å–ª–æ–π–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
      }

      const fullModel = await fullCore.initialize();
      
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
      if (!fullModel || !fullModel.model) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å');
      }
      
      // –ü–æ–º–µ—á–∞–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
      fullModel.isInitialized = true;
      
      if (this.progressManager) {
        this.progressManager.updateProgress(70, '–ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –≥–æ—Ä—è—á–µ–π –∑–∞–º–µ–Ω–µ...');
      }

      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –ì–æ—Ä—è—á–∞—è –∑–∞–º–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      const oldCore = this.neuralCore;
      const oldLite = this.neuralLite;

      if (this.progressManager) {
        this.progressManager.updateProgress(80, '–ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π...');
      }

      // –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode='full' –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –†–ï–ê–õ–¨–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç
      this.neuralCore = fullModel;
      this.neuralLite = null;

      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      const testModel = this.getCurrentModel();
      const modelStats = testModel?.getModelStats?.();
      const actualLayers = modelStats?.numLayers || 0;
      const actualParams = modelStats?.totalParams || 0;
      
      // –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: Full –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å >= 10 —Å–ª–æ–µ–≤ –∏ >= 50M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const isReallyFull = testModel === this.neuralCore && 
                          testModel?.isInitialized && 
                          testModel?.model &&
                          actualLayers >= 10 && 
                          actualParams >= 50000000;
      
      if (isReallyFull) {
        console.log('‚úÖ [upgradeToFull] –ß–ï–°–¢–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: FULL –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞');
        console.log('‚úÖ [upgradeToFull] –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏:', actualLayers);
        console.log('‚úÖ [upgradeToFull] –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', actualParams);
        
        // –ß–ï–°–¢–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mode —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.mode = 'full';
        this.isInitialized = true;
        
        if (this.progressManager) {
          this.progressManager.updateProgress(95, '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏...');
        }
      } else {
        console.error('‚ùå [upgradeToFull] –ß–ï–°–¢–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ - –º–æ–¥–µ–ª—å –ù–ï —è–≤–ª—è–µ—Ç—Å—è full');
        console.error('‚ùå [upgradeToFull] –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∏:', actualLayers, '(—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 10)');
        console.error('‚ùå [upgradeToFull] –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', actualParams, '(—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 50M)');
        console.error('‚ùå [upgradeToFull] –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ lite —Ä–µ–∂–∏–º—É');
        
        this.neuralCore = oldCore;
        this.neuralLite = oldLite;
        this.mode = 'lite';
        this.isInitialized = true; // lite –º–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        throw new Error(`Full –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ —á–µ—Å—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: ${actualLayers} —Å–ª–æ–µ–≤, ${actualParams} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`);
      }

      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      if (oldCore) {
        await this.gracefulCleanup(oldCore);
      }
      if (oldLite) {
        await this.gracefulCleanup(oldLite);
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
      memoryMonitor.forceGarbageCollection();

      if (this.progressManager) {
        this.progressManager.updateProgress(100, '–ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞');
        this.progressManager.completeOperation(true, 'Full Neural Network Ready');
      }

      console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω');
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏:', this.getCurrentModel()?.getModelStats?.() || 'N/A');
      
      return { 
        success: true, 
        message: 'Successfully upgraded to full model',
        mode: 'full',
        params: this.getCurrentModel()?.getModelStats?.()?.totalParams || 'N/A'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å:', error);
      this.mode = 'lite';
      this.isInitialized = true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      
      if (this.progressManager) {
        this.progressManager.completeOperation(false, `Upgrade failed: ${error.message}`);
      }
      
      return { 
        success: false, 
        message: error.message,
        fallback: 'lite',
        error: error.message
      };
    }
  }

  /**
   * üîÑ HOT SWAP –°–ò–°–¢–ï–ú–ê (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async switchToFullModel() {
    console.log('üîÑ HOT SWAP: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å...');

    if (this.mode === 'full' && this.neuralCore && this.isInitialized) {
      console.log('‚úÖ HOT SWAP: –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å');
      return { success: true, message: 'Already using full model' };
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    if (this.upgradeInProgress) {
      console.log('‚ö†Ô∏è HOT SWAP: Upgrade —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return { success: false, message: 'Upgrade already in progress' };
    }

    try {
      this.upgradeInProgress = true;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ fallback
      const fallbackModel = this.getCurrentModel();
      const fallbackMode = this.mode;

      this.mode = 'upgrading';
      console.log('üîÑ HOT SWAP: –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–æ—Ä—è—á—É—é –∑–∞–º–µ–Ω—É...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      const compatibilityCheck = await this.checkModelCompatibility('full');
      if (!compatibilityCheck.compatible) {
        console.log('‚ùå HOT SWAP: –ú–æ–¥–µ–ª–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã:', compatibilityCheck.reason);
        this.mode = fallbackMode;
        this.upgradeInProgress = false;
        return { success: false, message: compatibilityCheck.reason };
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Ñ–æ–Ω–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
      const { BooomerangsNeuralCore } = require('./neural-network-core.cjs');
      const newFullCore = new BooomerangsNeuralCore();

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏
      if (this.progressManager) {
        this.progressManager.startOperation('Optimized Hot Swap to Full Model', 35000);
      }

      try {
        if (this.progressManager) this.progressManager.updateProgress(15, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏...');

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞
        const fullModelPath = './neural-models/booomerangs-transformer/';
        const fs = require('fs');
        const path = require('path');

        let initPromise;
        if (fs.existsSync(path.join(fullModelPath, 'model.json'))) {
          console.log('üì¶ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å (12 —Å–ª–æ–µ–≤), –∑–∞–≥—Ä—É–∂–∞–µ–º...');
          if (this.progressManager) this.progressManager.updateProgress(30, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...');
          initPromise = newFullCore.loadModel(fullModelPath);
        } else {
          console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å (12 —Å–ª–æ–µ–≤)...');
          initPromise = newFullCore.initialize();
        }

        // –ü–æ–∫–∞ –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º cleanup
        const cleanupPromise = this.prepareForCleanup(fallbackModel);

        const [newFullModel] = await Promise.all([initPromise, cleanupPromise]);

        if (this.progressManager) this.progressManager.updateProgress(60, '–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');

        // –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const testResult = await this.testModel(newFullModel);
        if (!testResult.success) {
          throw new Error(`–ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testResult.message}`);
        }

        if (this.progressManager) this.progressManager.updateProgress(80, '–ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞...');

        // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º downtime
        const oldModel = this.neuralCore;
        const oldLite = this.neuralLite;

        this.neuralCore = newFullModel;
        this.neuralLite = null;
        this.mode = 'full';
        this.isInitialized = true; // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
        if (this.neuralCore && this.neuralCore.model) {
          this.neuralCore.isInitialized = true;
          console.log('‚úÖ [Hot Swap] FULL –º–æ–¥–µ–ª—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è');
          
          // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
          try {
            const testResponse = await this.neuralCore.generateResponse('—Ç–µ—Å—Ç', { maxTokens: 5 });
            console.log('‚úÖ [Hot Swap] FULL –º–æ–¥–µ–ª—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', testResponse.substring(0, 50));
            
            // –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û getCurrentModel() –¢–ï–ü–ï–†–¨ –í–û–ó–í–†–ê–©–ê–ï–¢ FULL
            const currentModel = this.getCurrentModel();
            if (currentModel === this.neuralCore) {
              console.log('‚úÖ [Hot Swap] getCurrentModel() –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FULL –º–æ–¥–µ–ª—å');
            } else {
              console.error('‚ùå [Hot Swap] getCurrentModel() –≤—Å—ë –µ—â—ë –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LITE –º–æ–¥–µ–ª—å');
              throw new Error('getCurrentModel() –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ FULL');
            }
            
          } catch (testError) {
            console.error('‚ùå [Hot Swap] FULL –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', testError.message);
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ LITE –µ—Å–ª–∏ FULL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            this.neuralCore = oldModel;
            this.neuralLite = oldLite;
            this.mode = 'lite';
            throw new Error('FULL –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
          }
        }

        if (this.progressManager) this.progressManager.updateProgress(95, '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è...');

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
        setImmediate(async () => {
          try {
            if (oldModel) await this.gracefulCleanup(oldModel);
            if (oldLite) await this.gracefulCleanup(oldLite);
            console.log('‚úÖ HOT SWAP: Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');
          } catch (cleanupError) {
            console.error('‚ö†Ô∏è HOT SWAP: –û—à–∏–±–∫–∞ cleanup:', cleanupError.message);
          }
        });

        if (this.progressManager) {
          this.progressManager.completeOperation(true, 'Optimized hot swap completed');
        }

        this.upgradeInProgress = false;
        console.log('‚úÖ HOT SWAP: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        return { 
          success: true, 
          message: 'Optimized hot swap completed',
          previousMode: fallbackMode,
          newMode: 'full',
          optimized: true
        };

      } catch (swapError) {
        console.log('‚ùå HOT SWAP: –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–π rollback...');

        // –ë—ã—Å—Ç—Ä—ã–π rollback
        this.mode = fallbackMode;

        if (this.progressManager) {
          this.progressManager.completeOperation(false, `Hot swap failed: ${swapError.message}`);
        }

        this.upgradeInProgress = false;
        throw swapError;
      }

    } catch (error) {
      console.error('‚ùå HOT SWAP: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      this.upgradeInProgress = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      if (!this.getCurrentModel()) {
        console.log('üö® HOT SWAP: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        try {
          await this.emergencyLiteInit();
        } catch (emergencyError) {
          console.error('üö® HOT SWAP: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', emergencyError.message);
        }
      }

      return { 
        success: false, 
        message: `Hot swap failed: ${error.message}`,
        fallbackActive: true,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏
   */
  async prepareForCleanup(model) {
    try {
      if (this.memoryMonitor) {
        await this.memoryMonitor.forceGarbageCollection();
      }
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ cleanup –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
   */
  async checkModelCompatibility(targetMode) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${targetMode}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
      const memoryStatus = this.memoryMonitor.getCurrentMemoryStatus();
      if (targetMode === 'full' && memoryStatus.usagePercent > 0.75) {
        return {
          compatible: false,
          reason: `Insufficient memory: ${memoryStatus.usagePercentFormatted} used`
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TensorFlow
      if (!global.tf) {
        return {
          compatible: false,
          reason: 'TensorFlow not available'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
      const currentModel = this.getCurrentModel();
      if (currentModel && targetMode === 'full') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–ª–æ–≤–∞—Ä–µ–π
        const currentVocabSize = currentModel.vocabSize || 0;
        if (currentVocabSize > 0 && currentVocabSize < 1000) {
          return {
            compatible: false,
            reason: 'Vocabulary size too small for full model'
          };
        }
      }

      console.log('‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã');
      return { compatible: true };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
      return {
        compatible: false,
        reason: `Compatibility check failed: ${error.message}`
      };
    }
  }

  /**
   * Graceful fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  async gracefulFallback(fallbackModel, fallbackMode) {
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º graceful fallback...');

    try {
      if (fallbackModel) {
        this.neuralCore = fallbackModel;
        this.mode = fallbackMode;
        console.log(`‚úÖ Fallback –≤—ã–ø–æ–ª–Ω–µ–Ω: –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∂–∏–º—É ${fallbackMode}`);
      } else {
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏
        await this.emergencyLiteInit();
        console.log('‚úÖ Fallback –≤—ã–ø–æ–ª–Ω–µ–Ω: —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è lite –º–æ–¥–µ–ª—å');
      }

      return { success: true };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ graceful fallback:', error);

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
      this.mode = 'error';
      return { success: false, error: error.message };
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏
   */
  async emergencyLiteInit() {
    console.log('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏...');

    try {
      const { BooomerangsNeuralLite } = require('./neural-network-lite.cjs');
      const emergencyLite = new BooomerangsNeuralLite();

      // –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      await emergencyLite.fastInitialize();

      this.neuralLite = emergencyLite;
      this.neuralCore = null;
      this.mode = 'lite';

      console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è lite –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return { success: true };

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.mode = 'error';
      return { success: false, error: error.message };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  async testModel(model) {
    try {
      if (!model) {
        return { success: false, message: 'Model is null' };
      }

      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const testInput = "–ø—Ä–∏–≤–µ—Ç";
      const testResult = await model.generateResponse(testInput, { maxTokens: 10 });

      if (testResult && testResult.length > 0) {
        return { success: true, response: testResult };
      } else {
        return { success: false, message: 'Model generated empty response' };
      }

    } catch (error) {
      return { success: false, message: error.message };
    }
  }

  /**
   * Graceful cleanup –º–æ–¥–µ–ª–µ–π
   */
  async gracefulCleanup(model) {
    try {
      if (model && typeof model.cleanup === 'function') {
        await model.cleanup();
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
      if (global.gc) {
        global.gc();
      }

      console.log('‚úÖ Graceful cleanup –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ graceful cleanup:', error);
    }
  }

  /**
   * –ì–∏–±—Ä–∏–¥–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–æ–¥–µ–ª–∏
   */
  async generateHybridResponse(input, context = {}) {
    try {
      const currentModel = this.getCurrentModel();

      if (!currentModel) {
        throw new Error('–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const actualModelType = currentModel === this.neuralCore ? 'FULL' : 'LITE';
      const actualLayers = currentModel === this.neuralCore ? '12' : '3';
      
      console.log(`üß† [Hybrid] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${actualModelType} –º–æ–¥–µ–ª—å (${actualLayers} —Å–ª–æ–µ–≤)`);
      console.log(`üß† [Hybrid] –†–µ–∂–∏–º —Å–∏—Å—Ç–µ–º—ã: ${this.mode}, –†–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: ${actualModelType}`);

      const response = await currentModel.generateResponse(input, {
        maxTokens: context.maxTokens || 150,
        temperature: context.temperature || 0.8,
        userContext: context.userContext
      });

      // –ú–∞—Ä–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –†–ï–ê–õ–¨–ù–´–ú —Ä–µ–∂–∏–º–æ–º –º–æ–¥–µ–ª–∏
      const markedResponse = this.markResponseWithMode(response, actualModelType.toLowerCase());

      return markedResponse;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ–∂–∏–º–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  markResponseWithMode(response, mode) {
    const markers = {
      'lite': '‚ö° Generated by Neural Lite',
      'full': 'üß† Generated by Neural Full',
      'upgrading': 'üîÑ Generated during upgrade',
      'error': '‚ö†Ô∏è Generated in fallback mode'
    };

    const marker = markers[mode] || 'ü§ñ Generated by Neural Network';

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞
    if (typeof response === 'string') {
      return `${response}\n\n_${marker}_`;
    }

    return response;
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Conversation Engine
   */
  async adaptForConversationEngine(input, context = {}) {
    try {
      console.log('üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Conversation Engine...');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
      const currentMode = this.mode;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
      const neuralContext = {
        ...context,
        mode: currentMode,
        conversationEngine: true,
        semanticContext: context.semanticContext,
        emotionalContext: context.emotionalContext,
        userProfile: context.userProfile
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const response = await this.generateHybridResponse(input, neuralContext);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º Conversation Engine
      return {
        response: response,
        confidence: this.getConfidenceByMode(currentMode),
        metadata: {
          neuralMode: currentMode,
          generatedBy: 'neural-integration',
          timestamp: new Date().toISOString(),
          modelType: currentMode === 'full' ? 'transformer-12layer' : 'transformer-3layer'
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è Conversation Engine:', error);

      // Fallback –¥–ª—è Conversation Engine
      return {
        response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–º –º–æ–¥—É–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        confidence: 0.3,
        metadata: {
          neuralMode: 'error',
          generatedBy: 'neural-integration-fallback',
          error: error.message,
          timestamp: new Date().toISOString()
        }
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–∂–∏–º—É
   */
  getConfidenceByMode(mode) {
    const confidenceMap = {
      'full': 0.95,
      'lite': 0.85,
      'upgrading': 0.7,
      'loading': 0.6,
      'error': 0.3
    };

    return confidenceMap[mode] || 0.5;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Conversation Engine
   */
  isReadyForConversationEngine() {
    return this.isInitialized && ['lite', 'full'].includes(this.mode);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è Conversation Engine
   */
  getStatusForConversationEngine() {
    return {
      isReady: this.isReadyForConversationEngine(),
      mode: this.mode,
      capabilities: {
        textGeneration: this.isInitialized,
        contextAwareness: this.mode === 'full',
        fastResponse: this.mode === 'lite',
        hotSwap: true
      },
      performance: {
        expectedLatency: this.mode === 'lite' ? '1-2s' : '2-5s',
        maxTokens: this.mode === 'lite' ? 100 : 512,
        concurrency: this.mode === 'lite' ? 'high' : 'medium'
      }
    };
  }

  getCurrentModel() {
    // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
    const fullReady = this.neuralCore && this.neuralCore.model && this.neuralCore.isInitialized;
    const liteReady = this.neuralLite && this.neuralLite.model && this.neuralLite.isInitialized;
    
    console.log(`üîç [getCurrentModel] –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:`, {
      mode: this.mode,
      fullReady: fullReady,
      liteReady: liteReady,
      hasCore: !!this.neuralCore,
      hasLite: !!this.neuralLite,
      coreInitialized: this.neuralCore?.isInitialized,
      liteInitialized: this.neuralLite?.isInitialized
    });
    
    // –ß–ï–°–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
    if (fullReady) {
      console.log('‚úÖ [getCurrentModel] –ò—Å–ø–æ–ª—å–∑—É–µ–º FULL –º–æ–¥–µ–ª—å (12 —Å–ª–æ–µ–≤)');
      // –ß–ï–°–¢–ù–û–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º mode —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –†–ï–ê–õ–¨–ù–û–ô –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (this.mode !== 'full') {
        console.log('üîß [getCurrentModel] –ß–ï–°–¢–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: lite ‚Üí full');
        this.mode = 'full';
      }
      return this.neuralCore;
    }
    
    // Fallback: LITE –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–∞
    if (liteReady) {
      console.log('‚ö†Ô∏è [getCurrentModel] –ò—Å–ø–æ–ª—å–∑—É–µ–º LITE –º–æ–¥–µ–ª—å (3 —Å–ª–æ—è)');
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º mode
      if (this.mode !== 'lite') {
        console.log('üîß [getCurrentModel] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º mode: ‚Üí lite');
        this.mode = 'lite';
      }
      return this.neuralLite;
    }
    
    // –ß–ï–°–¢–ù–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –†–ï–ê–õ–¨–ù–û –≥–æ—Ç–æ–≤–∞
    if (this.neuralCore && this.neuralCore.model && this.neuralCore.isInitialized) {
      console.log('üîß [getCurrentModel] –ß–ï–°–¢–ù–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º FULL (–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)');
      this.mode = 'full';
      return this.neuralCore;
    }
    
    if (this.neuralLite && this.neuralLite.model && this.neuralLite.isInitialized) {
      console.log('üîß [getCurrentModel] –ß–ï–°–¢–ù–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º LITE (–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)');
      this.mode = 'lite';
      return this.neuralLite;
    }
    
    console.log(`‚ùå [getCurrentModel] –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –ì–û–¢–û–í–ê: mode=${this.mode}`);
    return null;
  }

  cleanup(model) {
    if (model && typeof model.dispose === 'function') {
      model.dispose();
    }
  }

  /**
   * –û–±—É—á–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
   */
  async trainWithExpandedVocabulary(options = {}) {
    const currentModel = this.getCurrentModel();
    if (!currentModel) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    console.log('üéì –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
      const { NeuralTrainingSystem } = require('./neural-training-system.cjs');
      const trainingSystem = new NeuralTrainingSystem();
      await trainingSystem.initialize();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...');
      const dataStats = await trainingSystem.prepareTrainingData();

      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:`);
      console.log(`   - –û–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${dataStats.trainingSize}`);
      console.log(`   - –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${dataStats.validationSize}`);
      console.log(`   - –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: ${dataStats.vocabularySize}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
      const result = await trainingSystem.trainModel(currentModel, options);

      console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º:', error);
      throw error;
    }
  }

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (legacy)
   */
  async trainOnDialogues(trainingData) {
    if (!this.model) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º legacy –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–∞—Ö...`);

    const batchSize = 4;
    const epochs = 5;

    for (let epoch = 0; epoch < epochs; epoch++) {
      console.log(`üìà –≠–ø–æ—Ö–∞ ${epoch + 1}/${epochs}`);

      for (let i = 0; i < trainingData.length; i += batchSize) {
        const batch = trainingData.slice(i, i + batchSize);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const inputs = batch.map(item => {
          const tokens = this.tokenize(item.input);
          const padded = [...tokens];
          while (padded.length < this.maxSequenceLength) padded.push(0);
          return padded.slice(0, this.maxSequenceLength);
        });

        const targets = batch.map(item => {
          const tokens = this.tokenize(item.output);
          const padded = [...tokens];
          while (padded.length < this.maxSequenceLength) padded.push(0);
          return padded.slice(0, this.maxSequenceLength);
        });

        const positions = inputs.map(() => 
          Array.from({ length: this.maxSequenceLength }, (_, i) => i)
        );

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        const inputTensor = tf.tensor2d(inputs);
        const positionTensor = tf.tensor2d(positions);
        const targetTensor = tf.tensor2d(targets);

        try {
          // –û–±—É—á–∞—é—â–∏–π —à–∞–≥
          await this.model.fit([inputTensor, positionTensor], targetTensor, {
            epochs: 1,
            batchSize: batch.length,
            verbose: 0
          });

        } finally {
          inputTensor.dispose();
          positionTensor.dispose();
          targetTensor.dispose();
        }
      }
    }

    console.log('‚úÖ Legacy –æ–±—É—á–µ–Ω–∏–µ LITE –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    this.isTraining = false;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –º–æ–¥–µ–ª–∏
   */
  async updateModelVocabulary(expandedVocabulary, reverseVocabulary) {
    const currentModel = this.getCurrentModel();
    if (!currentModel) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    console.log('üìö –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–∏...');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
    currentModel.vocabulary = expandedVocabulary;
    currentModel.reverseVocabulary = reverseVocabulary;
    currentModel.vocabSize = expandedVocabulary.size;

    console.log(`‚úÖ –°–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${expandedVocabulary.size} —Ç–æ–∫–µ–Ω–æ–≤`);

    return {
      success: true,
      vocabularySize: expandedVocabulary.size,
      previousSize: currentModel.vocabSize
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async function initializeNeuralIntegration() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

  try {
    const integration = new NeuralIntegrationLayer();
    await integration.initialize();
    return integration;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Neural Integration:', error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const globalNeuralIntegration = new NeuralIntegrationLayer();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏
(async () => {
  try {
    console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Neural Integration...');
    await globalNeuralIntegration.initializeLite();
    console.log('‚úÖ Neural Integration –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ lite —Ä–µ–∂–∏–º–µ');
  } catch (error) {
    console.log('‚ö†Ô∏è –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è neural integration –ø—Ä–æ–ø—É—â–µ–Ω–∞:', error.message);
  }
})();

module.exports = {
  NeuralIntegrationLayer,
  initializeNeuralIntegration,
  getGlobalNeuralIntegration: () => globalNeuralIntegration
};