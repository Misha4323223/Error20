/**
 * üöÄ NEURAL API ROUTES
 * REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é BOOOMERANGS
 */

const { getGlobalNeuralIntegration } = require('./neural-integration.cjs');
const { getGlobalProgressManager } = require('./neural-progress-manager.cjs');

let neuralIntegration = null;
const progressManager = getGlobalProgressManager();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–ê - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –¥–ª—è –∑–∞–ø—É—Å–∫–∞
console.log('‚ö° Neural API –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞');

// –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –§–∞–∑—ã 2 - –≤—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑ setupNeuralRoutes
function assessPhase2Completion(stats) {
  const improvements = {
    layersUpgraded: stats.neural?.numLayers >= 12,
    ropeImplemented: stats.neural?.positionEncoding?.includes('RoPE'),
    memoryOptimized: stats.neural?.memoryOptimization?.includes('Checkpointing'),
    mixedPrecision: stats.neural?.precision?.includes('Mixed')
  };

  const completedCount = Object.values(improvements).filter(Boolean).length;
  const totalCount = Object.keys(improvements).length;
  const completionPercent = Math.round((completedCount / totalCount) * 100);

  return {
    improvements,
    completed: completedCount,
    total: totalCount,
    percentage: completionPercent,
    status: completionPercent === 100 ? '–§–∞–∑–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completionPercent}%`
  };
}

function setupNeuralRoutes(app) {
  // ‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/initialize-lite', async (req, res) => {
    try {
      console.log('‚ö° –ó–∞–ø—É—Å–∫ lite –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      const globalIntegration = getGlobalNeuralIntegration();

      if (globalIntegration?.isInitialized && globalIntegration?.mode === 'lite') {
        neuralIntegration = globalIntegration;
        return res.json({
          success: true,
          message: 'Lite –º–æ–¥–µ–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)',
          mode: 'lite',
          alreadyInitialized: true,
          stats: neuralIntegration.getCurrentModel()?.getModelStats?.() || null
        });
      }

      if (neuralIntegration?.isInitialized && neuralIntegration?.mode === 'lite') {
        return res.json({
          success: true,
          message: 'Lite –º–æ–¥–µ–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è)',
          mode: 'lite',
          alreadyInitialized: true,
          stats: neuralIntegration.getCurrentModel()?.getModelStats?.() || null
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ lite –≤–µ—Ä—Å–∏—é
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–µ–π—Ä–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Progress Manager
      progressManager.startOperation('Lite Neural Network Initialization', 10000);

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        progressManager.updateProgress(10, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
        neuralIntegration = getGlobalNeuralIntegration();
        if (!neuralIntegration.isInitialized) {
          await neuralIntegration.initializeLite();
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ lite —Ä–µ–∂–∏–º –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å –ø–æ–ª–Ω–∞—è
        if (neuralIntegration.mode !== 'lite') {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ LITE —Ä–µ–∂–∏–º...');
          progressManager.updateProgress(50, '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ LITE —Ä–µ–∂–∏–º...');
          await neuralIntegration.initializeLite();
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ
        progressManager.updateProgress(100, 'Lite –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≥–æ—Ç–æ–≤–∞');
        progressManager.completeOperation(true, 'Lite Neural Network Ready');

      } catch (initError) {
        progressManager.completeOperation(false, `Initialization failed: ${initError.message}`);
        throw initError;
      }

      res.json({
        success: true,
        message: 'Lite –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
        mode: neuralIntegration.mode,
        stats: neuralIntegration.getCurrentModel()?.getModelStats?.() || null,
        timestamp: new Date().toISOString(),
        initializationType: 'new_instance',
        autoUpgradeScheduled: false
      });

      // –ß–ï–°–¢–ù–û–°–¢–¨: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upgrade –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π API
      console.log('üìã [–ß–ï–°–¢–ù–û–°–¢–¨] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upgrade –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã');
      console.log('üí° [–ß–ï–°–¢–ù–û–°–¢–¨] –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ full –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/neural/upgrade-to-full');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lite –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lite –Ω–µ–π—Ä–æ—Å–µ—Ç–∏',
        details: error.message 
      });
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/initialize-lite', async (req, res) => {
    try {
      console.log('üì° [API] –ó–∞–ø—Ä–æ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');

      const neuralIntegration = getGlobalNeuralIntegration();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
      const apiTimeout = setTimeout(() => {
        if (!res.headersSent) {
          console.error('‚è∞ [API] –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE');
          res.status(408).json({
            success: false,
            error: 'TIMEOUT',
            message: '–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
          });
        }
      }, 60000); // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è API

      const result = await neuralIntegration.initializeLite();

      clearTimeout(apiTimeout);

      if (!res.headersSent) {
        console.log('‚úÖ [API] LITE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);

        res.json({
          success: result.success !== false,
          message: result.success !== false ? 'LITE –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' : result.message,
          data: result
        });
      }
    } catch (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE:', error);

      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          error: error.message,
          message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
        });
      }
    }
  });

  // üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å
  app.post('/api/neural/upgrade-to-full', async (req, res) => {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ upgrade –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å...');

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({
          success: false,
          error: '–°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ lite –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /api/neural/initialize-lite'
        });
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ upgrade –æ–ø–µ—Ä–∞—Ü–∏–∏
      progressManager.startOperation('Full Neural Network Upgrade', 60000);

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ upgrade –Ω–∞—á–∞–ª—Å—è
      res.json({
        success: true,
        message: 'Upgrade –Ω–∞—á–∞—Ç, –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket',
        timestamp: new Date().toISOString()
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º upgrade –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setImmediate(async () => {
        try {
          progressManager.updateProgress(10, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ upgrade...');
          await neuralIntegration.upgradeToFull();
          progressManager.completeOperation(true, 'Full Neural Network Ready');
        } catch (upgradeError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ upgrade:', upgradeError);
          progressManager.completeOperation(false, `Upgrade failed: ${upgradeError.message}`);
        }
      });

      return; // –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

      if (neuralIntegration.mode === 'full') {
        return res.json({
          success: true,
          message: '–ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞',
          mode: 'full',
          alreadyUpgraded: true
        });
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—è—á—É—é –∑–∞–º–µ–Ω—É –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å
      const upgradeResult = await neuralIntegration.switchToFullModel();

      if (upgradeResult.success) {
        res.json({
          success: true,
          message: '–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å',
          mode: neuralIntegration.mode,
          upgradeDetails: upgradeResult,
          stats: neuralIntegration.getCurrentModel()?.getModelStats?.() || null,
          timestamp: new Date().toISOString()
        });
      } else {
        res.status(500).json({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å',
          details: upgradeResult.message,
          fallbackActive: upgradeResult.fallbackActive
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ upgrade –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å',
        details: error.message 
      });
    }
  });

  // üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
  app.post('/api/neural/generate', async (req, res) => {
    try {
      const { input, options = {} } = req.body;

      if (!input) {
        return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–µ input' });
      }

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ 
          error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 
          suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
          fallback: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /api/ai/chat –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        });
      }

      const response = await neuralIntegration.generateHybridResponse(input, options);

      res.json({
        success: true,
        input,
        response,
        type: 'neural_hybrid',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ neural response:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞', 
        details: error.message 
      });
    }
  });

  // üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è dashboard - –ß–ï–°–¢–ù–ê–Ø –í–ï–†–°–ò–Ø
  app.get('/api/neural/stats', (req, res) => {
    try {
      const { getGlobalNeuralIntegration } = require('./neural-integration.cjs');
      const neuralIntegration = getGlobalNeuralIntegration();
      
      let actualStats = {
        success: true,
        neuralMode: 'unknown',
        mode: 'unknown',
        modelName: 'BOOOMERANGS-Neural-Unknown',
        layers: 0,
        parameters: '0',
        memoryUsage: '0MB',
        isInitialized: false,
        health: 'unknown',
        performance: 0,
        uptime: Math.floor(process.uptime()),
        training_sessions: 0,
        last_training: new Date().toISOString(),
        status: 'inactive',
        timestamp: new Date().toISOString()
      };

      if (neuralIntegration && neuralIntegration.isInitialized) {
        const currentModel = neuralIntegration.getCurrentModel();
        
        if (currentModel && currentModel.getModelStats) {
          try {
            const modelStats = currentModel.getModelStats();
            const layers = modelStats.numLayers || modelStats.layers || 0;
            const params = modelStats.totalParams || 0;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            let realMode = 'unknown';
            let modelName = 'BOOOMERANGS-Neural-Unknown';
            let performance = 0;
            
            if (params > 100000000) {
              realMode = 'full';
              modelName = 'BOOOMERANGS-Neural-Full-12Layer';
              performance = 95;
            } else if (params > 1000000) {
              realMode = 'lite';
              modelName = 'BOOOMERANGS-Neural-Lite-3Layer';
              performance = 75;
            } else {
              realMode = 'minimal';
              modelName = 'BOOOMERANGS-Neural-Minimal';
              performance = 50;
            }
            
            actualStats = {
              success: true,
              neuralMode: realMode,
              mode: realMode,
              modelName: modelName,
              layers: layers,
              parameters: params > 1000000 ? `${(params / 1000000).toFixed(1)}M` : `${Math.round(params / 1000)}K`,
              memoryUsage: modelStats.memoryEstimate?.estimatedMB ? `${modelStats.memoryEstimate.estimatedMB}MB` : '64MB',
              isInitialized: true,
              health: 'good',
              performance: performance,
              uptime: Math.floor(process.uptime()),
              training_sessions: 0,
              last_training: new Date().toISOString(),
              status: 'active',
              timestamp: new Date().toISOString(),
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              diagnostic: {
                declaredMode: neuralIntegration.mode,
                actualLayers: layers,
                actualParams: params,
                consistent: neuralIntegration.mode === realMode
              }
            };
            
            console.log(`üìä [Neural API] –ß–ï–°–¢–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${realMode} (${layers} —Å–ª–æ–µ–≤, ${params} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)`);
            
          } catch (error) {
            console.error('‚ùå [Neural API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏:', error);
          }
        }
      }

      res.json(actualStats);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è neural stats:', error);
      res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 
        details: error.message 
      });
    }
  });

  // üéì –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
  app.post('/api/neural/train', async (req, res) => {
    try {
      const { epochs = 10, batchSize = 8, expandVocabulary = true } = req.body;

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ 
          error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
          suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º'
        });
      }

      console.log('üéì –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
      const { NeuralTrainingSystem } = require('./neural-training-system.cjs');
      const trainingSystem = new NeuralTrainingSystem();
      await trainingSystem.initialize();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataStats = await trainingSystem.prepareTrainingData();

      res.json({
        success: true,
        message: '–û–±—É—á–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –∑–∞–ø—É—â–µ–Ω–æ',
        config: {
          epochs,
          batchSize,
          expandVocabulary
        },
        dataStats,
        timestamp: new Date().toISOString()
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const trainingPromise = trainingSystem.trainModel(
        neuralIntegration.getCurrentModel(),
        { epochs, batchSize }
      );

      // –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
      trainingPromise.then((result) => {
        console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        neuralIntegration.getCurrentModel()?.saveModel?.();

      }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º:', error);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è',
        details: error.message
      });
    }
  });

  // üìö Endpoint –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
  app.post('/api/neural/expand-vocabulary', async (req, res) => {
    try {
      const { targetSize = 10000, saveToFile = true } = req.body;

      console.log(`üìö –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–æ ${targetSize} —Ç–æ–∫–µ–Ω–æ–≤...`);

      const { NeuralVocabularyExpander } = require('./neural-vocabulary-expander.cjs');
      const expander = new NeuralVocabularyExpander();
      expander.targetVocabSize = targetSize;

      await expander.initialize();
      await expander.expandVocabulary();

      const stats = expander.getVocabularyStats();

      let saveResult = null;
      if (saveToFile) {
        saveResult = await expander.saveExpandedVocabulary();
      }

      res.json({
        success: true,
        message: `–°–ª–æ–≤–∞—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ ${stats.totalTokens} —Ç–æ–∫–µ–Ω–æ–≤`,
        stats,
        saveResult,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è',
        details: error.message
      });
    }
  });

  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
  app.get('/api/neural/training-stats', async (req, res) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–µ—Ç—Ä–∏–∫
      const fs = require('fs');
      const metricsPath = './neural-models/training-metrics.json';

      let trainingMetrics = null;
      if (fs.existsSync(metricsPath)) {
        trainingMetrics = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤–∞—Ä—è
      let vocabularyStats = null;
      const vocabPath = './neural-models/expanded-vocabulary.json';
      if (fs.existsSync(vocabPath)) {
        const vocabData = JSON.parse(fs.readFileSync(vocabPath, 'utf8'));
        vocabularyStats = vocabData.metadata;
      }

      res.json({
        success: true,
        trainingMetrics,
        vocabularyStats,
        modelStatus: neuralIntegration?.mode || 'not_initialized',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error.message
      });
    }
  });

  // üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  app.post('/api/neural/training-example', async (req, res) => {
    try {
      const { query, response, metadata = {} } = req.body;

      if (!query || !response) {
        return res.status(400).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è query –∏ response' });
      }

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ 
          error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
          suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏–º–µ—Ä–æ–≤'
        });
      }

      const success = await neuralIntegration.addTrainingExample(query, response, metadata);

      res.json({
        success,
        message: success ? '–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω' : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞' });
    }
  });

  // üéØ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/test', async (req, res) => {
    try {
      const testQueries = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ BOOOMERANGS?",
        "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞",
        "–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º"
      ];

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ 
          error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
          suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/neural/initialize-lite –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º'
        });
      }

      const results = [];

      for (const query of testQueries) {
        try {
          const response = await neuralIntegration.generateHybridResponse(query);
          results.push({
            query,
            response,
            success: true
          });
        } catch (error) {
          results.push({
            query,
            error: error.message,
            success: false
          });
        }
      }

      res.json({
        success: true,
        testResults: results,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
    }
  });

  // üîÑ –†–µ—Å—Ç–∞—Ä—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/restart', async (req, res) => {
    try {
      if (neuralIntegration) {
        await neuralIntegration.shutdown();
      }

      neuralIntegration = getGlobalNeuralIntegration();
      if (!neuralIntegration.isInitialized) {
        await neuralIntegration.initializeLite();
      }

      res.json({
        success: true,
        message: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏' });
    }
  });

  console.log('üîó Neural API routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

module.exports = { setupNeuralRoutes };