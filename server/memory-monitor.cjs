
/**
 * üß† MEMORY MONITOR - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä lite/full —Ä–µ–∂–∏–º–∞
 */

const os = require('os');

class MemoryMonitor {
  constructor() {
    this.memoryThresholds = {
      critical: 0.9,     // 90% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
      warning: 0.8,      // 80% - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      safe: 0.6,         // 60% - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
      liteMode: 0.7      // 70% - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ LITE —Ä–µ–∂–∏–º
    };
    
    this.monitoring = false;
    this.monitoringInterval = null;
    this.memoryHistory = [];
    this.maxHistoryLength = 20;
    
    console.log('üß† Memory Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
   */
  getCurrentMemoryStatus() {
    const totalMemory = os.totalmem();
    const freeMemory = os.freemem();
    const usedMemory = totalMemory - freeMemory;
    const usagePercent = usedMemory / totalMemory;
    
    return {
      total: totalMemory,
      free: freeMemory,
      used: usedMemory,
      usagePercent: usagePercent,
      totalMB: Math.round(totalMemory / (1024 * 1024)),
      freeMB: Math.round(freeMemory / (1024 * 1024)),
      usedMB: Math.round(usedMemory / (1024 * 1024)),
      usagePercentFormatted: `${(usagePercent * 100).toFixed(1)}%`
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
   */
  canLoadFullNeural() {
    const memStatus = this.getCurrentMemoryStatus();
    
    // –ü–æ–ª–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ç—Ä–µ–±—É–µ—Ç ~441MB + –±—É—Ñ–µ—Ä
    const fullNeuralRequirement = 500; // MB
    const availableMemory = memStatus.freeMB;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è FULL –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${availableMemory}MB`);
    console.log(`   –¢—Ä–µ–±—É–µ—Ç—Å—è: ${fullNeuralRequirement}MB`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${memStatus.usagePercentFormatted}`);
    
    const canLoad = availableMemory >= fullNeuralRequirement && 
                   memStatus.usagePercent < this.memoryThresholds.liteMode;
    
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${canLoad ? '‚úÖ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å FULL' : '‚ö° –¢–æ–ª—å–∫–æ LITE —Ä–µ–∂–∏–º'}`);
    
    return canLoad;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∂–∏–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
   */
  recommendNeuralMode() {
    const memStatus = this.getCurrentMemoryStatus();
    
    if (memStatus.usagePercent > this.memoryThresholds.critical) {
      return {
        mode: 'emergency',
        reason: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏',
        action: '–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å'
      };
    }
    
    if (memStatus.usagePercent > this.memoryThresholds.liteMode || !this.canLoadFullNeural()) {
      return {
        mode: 'lite',
        reason: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏',
        action: '–ó–∞–≥—Ä—É–∑–∏—Ç—å LITE –Ω–µ–π—Ä–æ—Å–µ—Ç—å'
      };
    }
    
    return {
      mode: 'full',
      reason: '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏',
      action: '–ó–∞–≥—Ä—É–∑–∏—Ç—å FULL –Ω–µ–π—Ä–æ—Å–µ—Ç—å'
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
   */
  startMonitoring(callback = null) {
    if (this.monitoring) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }
    
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏...');
    this.monitoring = true;
    
    this.monitoringInterval = setInterval(() => {
      const memStatus = this.getCurrentMemoryStatus();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.memoryHistory.push({
        timestamp: Date.now(),
        ...memStatus
      });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (this.memoryHistory.length > this.maxHistoryLength) {
        this.memoryHistory.shift();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
      if (memStatus.usagePercent > this.memoryThresholds.critical) {
        console.log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏: ${memStatus.usagePercentFormatted}`);
        if (callback) callback('critical', memStatus);
      } else if (memStatus.usagePercent > this.memoryThresholds.warning) {
        console.log(`‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–∞–º—è—Ç–∏: ${memStatus.usagePercentFormatted}`);
        if (callback) callback('warning', memStatus);
      }
      
    }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 —Å–µ–∫)');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring() {
    if (!this.monitoring) return;
    
    clearInterval(this.monitoringInterval);
    this.monitoring = false;
    console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
   */
  forceGarbageCollection() {
    console.log('üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...');
    
    if (global.gc) {
      global.gc();
      console.log('‚úÖ Garbage collection –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è Garbage collection –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å --expose-gc)');
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Node.js
    if (process.memoryUsage) {
      const beforeCleanup = process.memoryUsage();
      
      // –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–µ—à–∏
      if (require.cache) {
        Object.keys(require.cache).forEach(key => {
          if (key.includes('temp') || key.includes('cache')) {
            delete require.cache[key];
          }
        });
      }
      
      const afterCleanup = process.memoryUsage();
      const freedMB = (beforeCleanup.heapUsed - afterCleanup.heapUsed) / (1024 * 1024);
      
      console.log(`üîÑ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ heap –ø–∞–º—è—Ç–∏: ${freedMB.toFixed(2)}MB`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
   */
  isSafeToLoad(estimatedSizeMB) {
    const memStatus = this.getCurrentMemoryStatus();
    const afterLoadUsage = (memStatus.usedMB + estimatedSizeMB) / memStatus.totalMB;
    
    return {
      safe: afterLoadUsage < this.memoryThresholds.safe,
      warning: afterLoadUsage < this.memoryThresholds.warning,
      critical: afterLoadUsage < this.memoryThresholds.critical,
      estimatedUsage: afterLoadUsage,
      estimatedUsagePercent: `${(afterLoadUsage * 100).toFixed(1)}%`
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getDetailedStats() {
    const current = this.getCurrentMemoryStatus();
    const recommendation = this.recommendNeuralMode();
    
    return {
      current: current,
      recommendation: recommendation,
      monitoring: this.monitoring,
      history: this.memoryHistory.slice(-10), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
      thresholds: this.memoryThresholds,
      processMemory: process.memoryUsage ? process.memoryUsage() : null
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–∞—É–∑—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è event loop
   */
  async createEventLoopBreak(durationMs = 100) {
    return new Promise(resolve => setTimeout(resolve, durationMs));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  getMemoryTrend() {
    if (this.memoryHistory.length < 3) {
      return { trend: 'insufficient_data', direction: 'unknown' };
    }
    
    const recent = this.memoryHistory.slice(-3);
    const trend = recent[2].usagePercent - recent[0].usagePercent;
    
    return {
      trend: trend > 0.05 ? 'increasing' : trend < -0.05 ? 'decreasing' : 'stable',
      direction: trend > 0 ? 'up' : trend < 0 ? 'down' : 'stable',
      changePercent: (trend * 100).toFixed(2)
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const globalMemoryMonitor = new MemoryMonitor();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
globalMemoryMonitor.startMonitoring((level, status) => {
  if (level === 'critical') {
    console.log('üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò');
    globalMemoryMonitor.forceGarbageCollection();
  }
});

module.exports = {
  MemoryMonitor,
  getGlobalMemoryMonitor: () => globalMemoryMonitor
};
