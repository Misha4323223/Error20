
/**
 * üìö NEURAL VOCABULARY EXPANDER
 * –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
 */

const fs = require('fs');
const path = require('path');

class NeuralVocabularyExpander {
  constructor() {
    this.semanticMemory = null;
    this.expandedVocabulary = new Map();
    this.reverseExpandedVocabulary = new Map();
    this.wordFrequencies = new Map();
    this.specialTokens = ['<PAD>', '<UNK>', '<START>', '<END>', '<MASK>'];
    this.targetVocabSize = 10000;
    
    console.log('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—è —Å–ª–æ–≤–∞—Ä—è...');
  }

  async initialize() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
      try {
        const semanticModule = require('./semantic-memory/index.cjs');
        this.semanticMemory = semanticModule;
        console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—é —Å–ª–æ–≤–∞—Ä—è');
      } catch (error) {
        console.log('‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä');
      }

      console.log('üìö –†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å —Å–ª–æ–≤–∞—Ä—è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      return this;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—è —Å–ª–æ–≤–∞—Ä—è:', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
   */
  async expandVocabulary() {
    console.log(`üìö –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–æ ${this.targetVocabSize} —Ç–æ–∫–µ–Ω–æ–≤...`);

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    this.addSpecialTokens();

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä—É—Å—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
    this.addBaseRussianTokens();

    // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
    await this.extractWordsFromSemanticMemory();

    // 4. –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω—É—é –ª–µ–∫—Å–∏–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    this.addFrequentRussianWords();

    // 5. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–µ–∫—Å–∏–∫—É
    this.addSpecializedTerms();

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    this.addMorphologicalVariants();

    // 7. –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
    this.finalizeVocabulary();

    console.log(`‚úÖ –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ ${this.expandedVocabulary.size} —Ç–æ–∫–µ–Ω–æ–≤`);
    return this.expandedVocabulary;
  }

  addSpecialTokens() {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã...');
    
    this.specialTokens.forEach((token, index) => {
      this.expandedVocabulary.set(token, index);
      this.reverseExpandedVocabulary.set(index, token);
    });
  }

  addBaseRussianTokens() {
    console.log('üá∑üá∫ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä—É—Å—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã...');
    
    const baseTokens = [
      // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
      '—è', '—Ç—ã', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–æ', '–º—ã', '–≤—ã', '–æ–Ω–∏',
      '–º–æ–π', '—Ç–≤–æ–π', '–µ–≥–æ', '–µ—ë', '–Ω–∞—à', '–≤–∞—à', '–∏—Ö',
      '—Å–µ–±—è', '—Å–µ–±–µ', '—Å–æ–±–æ–π', '—ç—Ç–æ—Ç', '—Ç–æ—Ç', '–∫–æ—Ç–æ—Ä—ã–π',
      
      // –ü—Ä–µ–¥–ª–æ–≥–∏
      '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∑–∞', '–ø—Ä–∏', 
      '–ø–æ–¥', '–Ω–∞–¥', '—á–µ—Ä–µ–∑', '–±–µ–∑', '–º–µ–∂–¥—É', '–ø–µ—Ä–µ–¥', '–ø–æ—Å–ª–µ',
      '–≤–º–µ—Å—Ç–æ', '–æ–∫–æ–ª–æ', '–≤–æ–∑–ª–µ', '—Å—Ä–µ–¥–∏', '–ø—Ä–æ—Ç–∏–≤', '–≤–¥–æ–ª—å',
      
      // –°–æ—é–∑—ã
      '–∏', '–∏–ª–∏', '–Ω–æ', '–∞', '–¥–∞', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', 
      '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–µ—Å–ª–∏', '—Ö–æ—Ç—è', '—á—Ç–æ–±—ã', '–ø–æ—Ç–æ–º—É',
      
      // –ß–∞—Å—Ç–∏—Ü—ã
      '–Ω–µ', '–Ω–∏', '–∂–µ', '–ª–∏', '–±—ã', '–¥–∞–∂–µ', '—Ç–æ–ª—å–∫–æ', '—É–∂–µ',
      '–µ—â–µ', '–≤—Å—ë', '–≤—Å–µ', '—Ç–∞–∫', '—Ç—É—Ç', '–∑–¥–µ—Å—å', '—Ç–∞–º',
      
      // –ì–ª–∞–≥–æ–ª—ã –±–∞–∑–æ–≤—ã–µ
      '–±—ã—Ç—å', '–µ—Å—Ç—å', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—ã–ª–∏', '–±—É–¥–µ—Ç', '–±—É–¥—É—Ç',
      '–∏–º–µ—Ç—å', '–¥–µ–ª–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '–≥–æ–≤–æ—Ä–∏—Ç—å', '—Å–∫–∞–∑–∞—Ç—å', '–∑–Ω–∞—Ç—å',
      '–≤–∏–¥–µ—Ç—å', '–∏–¥—Ç–∏', '–µ—Ö–∞—Ç—å', '–∂–∏—Ç—å', '—Ä–∞–±–æ—Ç–∞—Ç—å', '–∏–≥—Ä–∞—Ç—å',
      '–¥—É–º–∞—Ç—å', '–ø–æ–Ω–∏–º–∞—Ç—å', '—Ö–æ—Ç–µ—Ç—å', '–º–æ—á—å', '–º–æ–≥—É', '–º–æ–∂–µ—à—å',
      '–ª—é–±–∏—Ç—å', '–Ω—Ä–∞–≤–∏—Ç—å—Å—è', '–ø–æ–º–æ–≥–∞—Ç—å', '—É—á–∏—Ç—å—Å—è', '–∏–∑—É—á–∞—Ç—å',
      
      // –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ
      '—á–µ–ª–æ–≤–µ–∫', '–ª—é–¥–∏', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '—Ä–µ–±–µ–Ω–æ–∫', '–¥–µ—Ç–∏',
      '–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–Ω–∞—Ç–∞', '—Å–µ–º—å—è', '—Ä–∞–±–æ—Ç–∞', '—à–∫–æ–ª–∞',
      '–¥–µ–Ω—å', '–Ω–æ—á—å', '–≤—Ä–µ–º—è', '–≥–æ–¥', '–º–µ—Å—è—Ü', '–Ω–µ–¥–µ–ª—è',
      '–≥–æ—Ä–æ–¥', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '–∂–∏–∑–Ω—å', '—Å–º–µ—Ä—Ç—å', '–∑–¥–æ—Ä–æ–≤—å–µ',
      
      // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ
      '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π',
      '–∫—Ä–∞—Å–∏–≤—ã–π', '—É–º–Ω—ã–π', '–±—ã—Å—Ç—Ä—ã–π', '–º–µ–¥–ª–µ–Ω–Ω—ã–π', '–≤—ã—Å–æ–∫–∏–π', '–Ω–∏–∑–∫–∏–π',
      '–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π', '–∂–µ–ª—Ç—ã–π',
      
      // –ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ
      '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', 
      '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '—Å—Ç–æ', '—Ç—ã—Å—è—á–∞', '–º–∏–ª–ª–∏–æ–Ω',
      '–ø–µ—Ä–≤—ã–π', '–≤—Ç–æ—Ä–æ–π', '—Ç—Ä–µ—Ç–∏–π', '–ø–æ—Å–ª–µ–¥–Ω–∏–π',
      
      // –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
      '—á—Ç–æ', '–∫—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', 
      '–æ—Ç–∫—É–¥–∞', '–∫—É–¥–∞', '—Å–∫–æ–ª—å–∫–æ', '–∫–∞–∫–æ–π', '—á–µ–π',
      
      // BOOOMERANGS —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞
      'booomerangs', '–±—É–º–µ—Ä–∞–Ω–≥', 'ai', '–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '—Å–µ–º–∞–Ω—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏–∑', '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–æ–±—Ä–∞–±–æ—Ç–∫–∞',
      '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–¥–∏–∑–∞–π–Ω', '–≤—ã—à–∏–≤–∫–∞', '–ø–µ—á–∞—Ç—å',
      '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º'
    ];

    baseTokens.forEach(token => {
      if (!this.expandedVocabulary.has(token)) {
        const index = this.expandedVocabulary.size;
        this.expandedVocabulary.set(token, index);
        this.reverseExpandedVocabulary.set(index, token);
        this.wordFrequencies.set(token, 100); // –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤
      }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${baseTokens.length} –±–∞–∑–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  async extractWordsFromSemanticMemory() {
    if (!this.semanticMemory) {
      console.log('‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ');
      return;
    }

    console.log('üß† –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      const interactions = await this.semanticMemory.getAllInteractions?.() || [];
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${interactions.length} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π`);

      // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      const allText = interactions
        .map(i => `${i.query || ''} ${i.response || ''}`)
        .join(' ');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
      const words = this.extractWordsFromText(allText);
      console.log(`üî§ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${words.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤`);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
      words.forEach(word => {
        const freq = this.wordFrequencies.get(word) || 0;
        this.wordFrequencies.set(word, freq + 1);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5000 —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
      const sortedWords = Array.from(this.wordFrequencies.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5000);

      sortedWords.forEach(([word, freq]) => {
        if (!this.expandedVocabulary.has(word) && this.isValidRussianWord(word)) {
          const index = this.expandedVocabulary.size;
          this.expandedVocabulary.set(word, index);
          this.reverseExpandedVocabulary.set(index, word);
        }
      });

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${sortedWords.length} —Å–ª–æ–≤ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏:', error.message);
    }
  }

  extractWordsFromText(text) {
    if (!text) return [];

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
    const cleanText = text
      .toLowerCase()
      .replace(/[^\u0400-\u04FF\w\s]/g, ' ') // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ª–∞—Ç–∏–Ω–∏—Ü—É
      .replace(/\s+/g, ' ')
      .trim();

    const words = cleanText.match(/\b[\u0400-\u04FF\w]{2,}\b/g) || [];
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(words)];
  }

  isValidRussianWord(word) {
    if (!word || word.length < 2 || word.length > 30) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const hasCyrillic = /[\u0400-\u04FF]/.test(word);
    const isEnglishTerm = /^[a-z]+$/.test(word) && word.length > 2;
    
    return hasCyrillic || isEnglishTerm;
  }

  addFrequentRussianWords() {
    console.log('üìä –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω—É—é –ª–µ–∫—Å–∏–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...');

    const frequentWords = [
      // –¢–æ–ø-1000 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
      '–±—ã—Ç—å', '—ç—Ç–æ', '–≤–µ—Å—å', '—Ç–∞–∫–æ–π', '–Ω–∞—à', '–∫–æ—Ç–æ—Ä—ã–π', '–º–æ—á—å', '—Å–≤–æ–π',
      '–µ—Å–ª–∏', '–≤—Ä–µ–º—è', '—Ä—É–∫–∞', '–Ω–µ—Ç', '—Å–∞–º—ã–π', '–Ω–∏', '—Å—Ç–∞—Ç—å', '–±–æ–ª—å—à–æ–π',
      '–¥–∞–∂–µ', '–¥—Ä—É–≥–æ–π', '–Ω–∞—à', '—Å–∞–º', '—Ç–∞–º', '—Ç–æ–ª—å–∫–æ', '–µ—â—ë', '—Ç–∞–∫–∂–µ',
      '–ø–æ—Ç–æ–º', '–æ—á–µ–Ω—å', '–º–µ–∂–¥—É', '—á–µ—Ä–µ–∑', '—Å–Ω–æ–≤–∞', '–æ–∫–æ–ª–æ', '–¥–æ–ª–∂–Ω—ã–π',
      '–º–µ—Å—Ç–æ', '–∏–º–µ—Ç—å', '—Ö–æ—Ç–µ—Ç—å', '—Å—Ç–∞—Ä—ã–π', '–≥–æ–ª–æ–≤–∞', '–¥–µ–ª–æ', '–Ω–µ—Å–∫–æ–ª—å–∫–æ',
      '—Å—Ç–æ—Ä–æ–Ω–∞', '–∂–¥–∞—Ç—å', '–æ–±—Ä–∞–∑', '—Ä–∞–∑–Ω—ã–π', '–ª—é–±–æ–π', '–ø—Ä–æ—Ü–µ—Å—Å', '–≤–æ–ø—Ä–æ—Å',
      '—Å–º—ã—Å–ª', '—É—Å–ª–æ–≤–∏–µ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–ø—Ä–æ–π—Ç–∏', '—Ä–µ—à–µ–Ω–∏–µ', '–∫–∞—á–µ—Å—Ç–≤–æ',
      // ... –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –º–Ω–æ–≥–æ —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤
      '—Å–∏—Å—Ç–µ–º–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '—Å–æ–∑–¥–∞–Ω–∏–µ', '–æ–±—â–µ—Å—Ç–≤–æ',
      '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–ø–æ–ª–∏—Ç–∏–∫–∞',
      '–∫—É–ª—å—Ç—É—Ä–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–Ω–∞—É–∫–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Å–ø–æ—Ä—Ç'
    ];

    frequentWords.forEach(word => {
      if (!this.expandedVocabulary.has(word)) {
        const index = this.expandedVocabulary.size;
        this.expandedVocabulary.set(word, index);
        this.reverseExpandedVocabulary.set(index, word);
        this.wordFrequencies.set(word, 50);
      }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${frequentWords.length} —á–∞—Å—Ç—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  }

  addSpecializedTerms() {
    console.log('üé® –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–µ–∫—Å–∏–∫—É...');

    const specializedTerms = [
      // AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      '–∞–ª–≥–æ—Ä–∏—Ç–º', '–Ω–µ–π—Ä–æ–Ω–Ω—ã–π', '–º–∞—à–∏–Ω–Ω—ã–π', '–æ–±—É—á–µ–Ω–∏–µ', '–¥–∞–Ω–Ω—ã–µ', '–º–æ–¥–µ–ª—å',
      '—Å–µ—Ç—å', '—Å–ª–æ–π', '–ø–∞—Ä–∞–º–µ—Ç—Ä', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ', '–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è',
      '—Ä–µ–≥—Ä–µ—Å—Å–∏—è', '–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–≥—Ä–∞–¥–∏–µ–Ω—Ç', '—Ñ—É–Ω–∫—Ü–∏—è',
      '—Ç–µ–Ω–∑–æ—Ä', '–º–∞—Ç—Ä–∏—Ü–∞', '–≤–µ–∫—Ç–æ—Ä', '—Å–∫–∞–ª—è—Ä', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä', 'attention',
      
      // –î–∏–∑–∞–π–Ω –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
      '–¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏–∫–∞', '–≤–µ–∫—Ç–æ—Ä', '—Ä–∞—Å—Ç—Ä', '–ø–∏–∫—Å–µ–ª—å', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
      '—Ü–≤–µ—Ç', '–ø–∞–ª–∏—Ç—Ä–∞', '–∫–æ–Ω—Ç—Ä–∞—Å—Ç', '—è—Ä–∫–æ—Å—Ç—å', '–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å', '–æ—Ç—Ç–µ–Ω–æ–∫',
      '–∫–æ–º–ø–æ–∑–∏—Ü–∏—è', '–º–∞–∫–µ—Ç', '—à—Ä–∏—Ñ—Ç', '—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—è', '–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥–∏–Ω–≥',
      
      // –í—ã—à–∏–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∏–ª—å
      '–≤—ã—à–∏–≤–∫–∞', '–Ω–∏—Ç—å', '—Å—Ç–µ–∂–æ–∫', '–∏–≥–ª–∞', '—Ç–∫–∞–Ω—å', '—É–∑–æ—Ä', '–æ—Ä–Ω–∞–º–µ–Ω—Ç',
      '—Å—Ö–µ–º–∞', '–∫–∞–Ω–≤–∞', '–∫—Ä–µ—Å—Ç–∏–∫', '–≥–ª–∞–¥—å', '—Å—Ç—Ä–æ—á–∫–∞', '–ø–µ—Ç–ª—è', '–º—É–ª–∏–Ω–µ',
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–µ—á–∞—Ç—å
      '–ø–µ—á–∞—Ç—å', '–ø—Ä–∏–Ω—Ç–µ—Ä', '—Å—Ç—Ä—É–π–Ω—ã–π', '–ª–∞–∑–µ—Ä–Ω—ã–π', '—Å—É–±–ª–∏–º–∞—Ü–∏—è', '—Ç–µ—Ä–º–æ–ø–µ—á–∞—Ç—å',
      '—Ñ–æ—Ä–º–∞—Ç', '–∫–∞—á–µ—Å—Ç–≤–æ', '—Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∞', '–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞', '–ø—Ä–æ—Ñ–∏–ª—å',
      
      // –ë–∏–∑–Ω–µ—Å —Ç–µ—Ä–º–∏–Ω—ã
      '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '—Ü–µ–ª—å', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–∫–∞—á–µ—Å—Ç–≤–æ',
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±—é–¥–∂–µ—Ç', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∫–æ–Ω—Ç—Ä–æ–ª—å',
      '–∞–Ω–∞–ª–∏–∑', '–æ—Ç—á–µ—Ç', '–º–µ—Ç—Ä–∏–∫–∞', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    ];

    specializedTerms.forEach(term => {
      if (!this.expandedVocabulary.has(term)) {
        const index = this.expandedVocabulary.size;
        this.expandedVocabulary.set(term, index);
        this.reverseExpandedVocabulary.set(index, term);
        this.wordFrequencies.set(term, 30);
      }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${specializedTerms.length} —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤`);
  }

  addMorphologicalVariants() {
    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...');

    const baseWords = ['—Å–æ–∑–¥–∞—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '—Ä–∞–±–æ—Ç–∞—Ç—å', '–¥—É–º–∞—Ç—å', '–≥–æ–≤–æ—Ä–∏—Ç—å'];
    const variants = [];

    baseWords.forEach(baseWord => {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è)
      const forms = this.generateMorphologicalForms(baseWord);
      variants.push(...forms);
    });

    variants.forEach(variant => {
      if (!this.expandedVocabulary.has(variant) && this.isValidRussianWord(variant)) {
        const index = this.expandedVocabulary.size;
        this.expandedVocabulary.set(variant, index);
        this.reverseExpandedVocabulary.set(index, variant);
        this.wordFrequencies.set(variant, 20);
      }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${variants.length} –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
  }

  generateMorphologicalForms(word) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º
    const forms = [word];
    
    if (word.endsWith('–∞—Ç—å')) {
      const base = word.slice(0, -3);
      forms.push(base + '–∞—é', base + '–∞–µ—à—å', base + '–∞–µ—Ç', base + '–∞–µ–º', base + '–∞–µ—Ç–µ', base + '–∞—é—Ç');
      forms.push(base + '–∞–ª', base + '–∞–ª–∞', base + '–∞–ª–æ', base + '–∞–ª–∏');
    }
    
    return forms;
  }

  finalizeVocabulary() {
    console.log('üéØ –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å...');

    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.expandedVocabulary.size > this.targetVocabSize) {
      console.log(`‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä (${this.expandedVocabulary.size}), –æ–±—Ä–µ–∑–∞–µ–º...`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ø
      const sortedEntries = Array.from(this.expandedVocabulary.entries())
        .sort((a, b) => (this.wordFrequencies.get(b[0]) || 0) - (this.wordFrequencies.get(a[0]) || 0))
        .slice(0, this.targetVocabSize);

      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
      this.expandedVocabulary.clear();
      this.reverseExpandedVocabulary.clear();

      sortedEntries.forEach(([word], index) => {
        this.expandedVocabulary.set(word, index);
        this.reverseExpandedVocabulary.set(index, word);
      });
    }

    // –î–æ–±–∏—Ä–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    while (this.expandedVocabulary.size < this.targetVocabSize) {
      const randomWord = `token_${this.expandedVocabulary.size}`;
      const index = this.expandedVocabulary.size;
      this.expandedVocabulary.set(randomWord, index);
      this.reverseExpandedVocabulary.set(index, randomWord);
    }

    console.log(`‚úÖ –°–ª–æ–≤–∞—Ä—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.expandedVocabulary.size} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
   */
  async saveExpandedVocabulary(path = './neural-models/expanded-vocabulary.json') {
    try {
      const vocabularyData = {
        vocabulary: Object.fromEntries(this.expandedVocabulary),
        reverseVocabulary: Object.fromEntries(this.reverseExpandedVocabulary),
        wordFrequencies: Object.fromEntries(this.wordFrequencies),
        metadata: {
          size: this.expandedVocabulary.size,
          created: new Date().toISOString(),
          version: '1.0.0'
        }
      };

      const dir = require('path').dirname(path);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      fs.writeFileSync(path, JSON.stringify(vocabularyData, null, 2));
      console.log(`üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${path}`);
      
      return { success: true, path, size: this.expandedVocabulary.size };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
   */
  async loadExpandedVocabulary(path = './neural-models/expanded-vocabulary.json') {
    try {
      if (!fs.existsSync(path)) {
        console.log('‚ö†Ô∏è –§–∞–π–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return { success: false, message: 'File not found' };
      }

      const vocabularyData = JSON.parse(fs.readFileSync(path, 'utf8'));
      
      this.expandedVocabulary = new Map(Object.entries(vocabularyData.vocabulary));
      this.reverseExpandedVocabulary = new Map(Object.entries(vocabularyData.reverseVocabulary).map(([k, v]) => [parseInt(k), v]));
      this.wordFrequencies = new Map(Object.entries(vocabularyData.wordFrequencies || {}));

      console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: ${this.expandedVocabulary.size} —Ç–æ–∫–µ–Ω–æ–≤`);
      return { success: true, size: this.expandedVocabulary.size };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–≤–∞—Ä—è
   */
  getVocabularyStats() {
    const totalTokens = this.expandedVocabulary.size;
    const specialTokensCount = this.specialTokens.length;
    const regularTokensCount = totalTokens - specialTokensCount;

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–ª–∏–Ω–µ —Å–ª–æ–≤
    const lengthDistribution = {};
    for (const word of this.expandedVocabulary.keys()) {
      const length = word.length;
      lengthDistribution[length] = (lengthDistribution[length] || 0) + 1;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É —Å–ª–æ–≤
    const cyrillicCount = Array.from(this.expandedVocabulary.keys())
      .filter(word => /[\u0400-\u04FF]/.test(word)).length;
    const latinCount = Array.from(this.expandedVocabulary.keys())
      .filter(word => /^[a-zA-Z]+$/.test(word)).length;

    return {
      totalTokens,
      specialTokensCount,
      regularTokensCount,
      cyrillicWords: cyrillicCount,
      latinWords: latinCount,
      lengthDistribution,
      averageWordLength: this.calculateAverageWordLength(),
      vocabularyCoverage: this.estimateVocabularyCoverage()
    };
  }

  calculateAverageWordLength() {
    const words = Array.from(this.expandedVocabulary.keys()).filter(w => !this.specialTokens.includes(w));
    return words.reduce((sum, word) => sum + word.length, 0) / words.length;
  }

  estimateVocabularyCoverage() {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
    const size = this.expandedVocabulary.size;
    if (size < 1000) return '–Ω–∏–∑–∫–æ–µ';
    if (size < 5000) return '—Å—Ä–µ–¥–Ω–µ–µ';
    if (size < 10000) return '—Ö–æ—Ä–æ—à–µ–µ';
    return '–æ—Ç–ª–∏—á–Ω–æ–µ';
  }
}

module.exports = { NeuralVocabularyExpander };
