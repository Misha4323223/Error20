
/**
 * Web Search Provider - —Ä–µ–∞–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DuckDuckGo, Wikipedia –∏ –¥—Ä—É–≥–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
 */

const axios = require('axios');

// –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const searchCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
export async function search(query, options = {}) {
  console.log(`üîç [WEB-SEARCH] –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);

  const startTime = Date.now();
  const cacheKey = `${query}_${JSON.stringify(options)}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (searchCache.has(cacheKey)) {
    const cached = searchCache.get(cacheKey);
    if (Date.now() - cached.timestamp < CACHE_TTL) {
      console.log(`üìã [WEB-SEARCH] –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è: "${query}"`);
      return cached.results;
    }
  }

  const results = [];
  const maxResults = options.maxResults || 10;

  try {
    // 1. –ü–æ–∏—Å–∫ –≤ DuckDuckGo (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    console.log(`ü¶Ü [WEB-SEARCH] –ü–æ–∏—Å–∫ –≤ DuckDuckGo...`);
    const duckResults = await searchDuckDuckGo(query, Math.ceil(maxResults * 0.6));
    results.push(...duckResults);

    // 2. –ü–æ–∏—Å–∫ –≤ Wikipedia
    console.log(`üìö [WEB-SEARCH] –ü–æ–∏—Å–∫ –≤ Wikipedia...`);
    const wikiResults = await searchWikipedia(query, Math.ceil(maxResults * 0.3));
    results.push(...wikiResults);

    // 3. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏)
    if (isNewsQuery(query)) {
      console.log(`üì∞ [WEB-SEARCH] –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π...`);
      const newsResults = await searchNews(query, Math.ceil(maxResults * 0.2));
      results.push(...newsResults);
    }

    // 4. –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—É—á–Ω—ã–π)
    if (isScientificQuery(query)) {
      console.log(`üî¨ [WEB-SEARCH] –ü–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π...`);
      const academicResults = await searchAcademic(query, Math.ceil(maxResults * 0.2));
      results.push(...academicResults);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueResults = removeDuplicates(results);
    const sortedResults = uniqueResults
      .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0))
      .slice(0, maxResults);

    const processingTime = Date.now() - startTime;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    searchCache.set(cacheKey, {
      results: sortedResults,
      timestamp: Date.now()
    });

    console.log(`‚úÖ [WEB-SEARCH] –ù–∞–π–¥–µ–Ω–æ ${sortedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ ${processingTime}–º—Å`);
    
    return sortedResults;

  } catch (error) {
    console.error(`‚ùå [WEB-SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤ DuckDuckGo —á–µ—Ä–µ–∑ –∏—Ö Instant Answer API
 */
async function searchDuckDuckGo(query, maxResults = 5) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo Instant Answer API
    const response = await axios.get('https://api.duckduckgo.com/', {
      params: {
        q: query,
        format: 'json',
        no_html: '1',
        skip_disambig: '1'
      },
      timeout: 5000
    });

    const results = [];
    const data = response.data;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if (data.Abstract && data.Abstract.length > 0) {
      results.push({
        title: data.Heading || query,
        snippet: data.Abstract,
        url: data.AbstractURL || '',
        source: 'duckduckgo',
        type: 'abstract',
        relevanceScore: 0.9
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (data.Definition && data.Definition.length > 0) {
      results.push({
        title: `–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${query}`,
        snippet: data.Definition,
        url: data.DefinitionURL || '',
        source: 'duckduckgo',
        type: 'definition',
        relevanceScore: 0.95
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    if (data.RelatedTopics && Array.isArray(data.RelatedTopics)) {
      data.RelatedTopics.slice(0, maxResults - results.length).forEach(topic => {
        if (topic.Text && topic.FirstURL) {
          results.push({
            title: extractTitleFromText(topic.Text),
            snippet: topic.Text,
            url: topic.FirstURL,
            source: 'duckduckgo',
            type: 'related',
            relevanceScore: 0.7
          });
        }
      });
    }

    return results;

  } catch (error) {
    console.error(`‚ùå DuckDuckGo –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤ Wikipedia
 */
async function searchWikipedia(query, maxResults = 3) {
  try {
    // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
    const searchResponse = await axios.get('https://ru.wikipedia.org/w/api.php', {
      params: {
        action: 'query',
        list: 'search',
        srsearch: query,
        format: 'json',
        srlimit: maxResults,
        origin: '*'
      },
      timeout: 5000
    });

    const results = [];
    const searchResults = searchResponse.data.query?.search || [];

    for (const article of searchResults) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        const summaryResponse = await axios.get('https://ru.wikipedia.org/w/api.php', {
          params: {
            action: 'query',
            format: 'json',
            titles: article.title,
            prop: 'extracts',
            exintro: true,
            explaintext: true,
            exsentences: 3,
            origin: '*'
          },
          timeout: 3000
        });

        const pages = summaryResponse.data.query?.pages || {};
        const pageId = Object.keys(pages)[0];
        const extract = pages[pageId]?.extract || article.snippet;

        results.push({
          title: article.title,
          snippet: extract.replace(/<[^>]*>/g, ''), // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
          url: `https://ru.wikipedia.org/wiki/${encodeURIComponent(article.title)}`,
          source: 'wikipedia',
          type: 'encyclopedia',
          relevanceScore: calculateRelevanceScore(query, article.title, extract)
        });

      } catch (err) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        results.push({
          title: article.title,
          snippet: article.snippet.replace(/<[^>]*>/g, ''),
          url: `https://ru.wikipedia.org/wiki/${encodeURIComponent(article.title)}`,
          source: 'wikipedia',
          type: 'encyclopedia',
          relevanceScore: 0.6
        });
      }
    }

    return results;

  } catch (error) {
    console.error(`‚ùå Wikipedia –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
 */
async function searchNews(query, maxResults = 3) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º NewsAPI (—Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á) –∏–ª–∏ RSS –ª–µ–Ω—Ç—ã
    const results = [];
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ RSS (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –±–µ–∑ API –∫–ª—é—á–∞)
    try {
      const rssResponse = await axios.get(`https://news.google.com/rss/search?q=${encodeURIComponent(query)}&hl=ru&gl=RU&ceid=RU:ru`, {
        timeout: 5000
      });
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ RSS (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      const items = extractRSSItems(rssResponse.data);
      
      items.slice(0, maxResults).forEach(item => {
        results.push({
          title: item.title,
          snippet: item.description || '',
          url: item.link,
          source: 'google_news',
          type: 'news',
          relevanceScore: 0.8,
          publishedDate: item.pubDate
        });
      });
      
    } catch (rssError) {
      console.log(`‚ö†Ô∏è RSS –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${rssError.message}`);
    }

    return results;

  } catch (error) {
    console.error(`‚ùå –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
    return [];
  }
}

/**
 * –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
 */
async function searchAcademic(query, maxResults = 2) {
  try {
    const results = [];
    
    // –ü–æ–∏—Å–∫ –≤ arXiv
    try {
      const arxivResponse = await axios.get('http://export.arxiv.org/api/query', {
        params: {
          search_query: `all:${query}`,
          start: 0,
          max_results: maxResults
        },
        timeout: 7000
      });

      const papers = parseArxivXML(arxivResponse.data);
      
      papers.forEach(paper => {
        results.push({
          title: paper.title,
          snippet: paper.summary,
          url: paper.id,
          source: 'arxiv',
          type: 'academic',
          relevanceScore: 0.85,
          authors: paper.authors,
          publishedDate: paper.published
        });
      });
      
    } catch (arxivError) {
      console.log(`‚ö†Ô∏è arXiv –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${arxivError.message}`);
    }

    return results;

  } catch (error) {
    console.error(`‚ùå –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
    return [];
  }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º
 */
export async function performAdvancedSearch(query, options = {}) {
  console.log(`üî¨ [ADVANCED-SEARCH] –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);

  try {
    const basicResults = await search(query, options);
    
    if (basicResults.length === 0) {
      return {
        summary: '–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        results: [],
        confidence: 0.1
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
    const summary = generateSearchSummary(query, basicResults);
    const confidence = calculateSearchConfidence(basicResults);

    return {
      summary: summary,
      results: basicResults,
      confidence: confidence,
      totalResults: basicResults.length,
      searchTime: Date.now()
    };

  } catch (error) {
    console.error(`‚ùå [ADVANCED-SEARCH] –û—à–∏–±–∫–∞: ${error.message}`);
    
    return {
      summary: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      results: [],
      confidence: 0.1,
      error: error.message
    };
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

function isNewsQuery(query) {
  const newsKeywords = ['–Ω–æ–≤–æ—Å—Ç–∏', '—Å–æ–±—ã—Ç–∏–µ', '–ø—Ä–æ–∏–∑–æ—à–ª–æ', '—Å–ª—É—á–∏–ª–æ—Å—å', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'];
  return newsKeywords.some(keyword => query.toLowerCase().includes(keyword));
}

function isScientificQuery(query) {
  const scienceKeywords = ['–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–Ω–∞—É–∫–∞', '–Ω–∞—É—á–Ω—ã–π', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '—Ç–µ–æ—Ä–∏—è', '—Ñ–æ—Ä–º—É–ª–∞', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è'];
  return scienceKeywords.some(keyword => query.toLowerCase().includes(keyword));
}

function calculateRelevanceScore(query, title, content) {
  const queryWords = query.toLowerCase().split(/\s+/);
  const titleWords = title.toLowerCase().split(/\s+/);
  const contentWords = content.toLowerCase().split(/\s+/);

  let score = 0;
  queryWords.forEach(word => {
    if (titleWords.some(tw => tw.includes(word))) score += 0.4;
    if (contentWords.some(cw => cw.includes(word))) score += 0.1;
  });

  return Math.min(1, score);
}

function removeDuplicates(results) {
  const seen = new Set();
  return results.filter(result => {
    const key = `${result.title}_${result.url}`;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
}

function extractTitleFromText(text) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 60 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  return text.length > 60 ? text.substring(0, 60) + '...' : text;
}

function extractRSSItems(xmlData) {
  const items = [];
  try {
    // –ü—Ä–æ—Å—Ç–æ–π regex –ø–∞—Ä—Å–∏–Ω–≥ RSS (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XML –ø–∞—Ä—Å–µ—Ä)
    const itemMatches = xmlData.match(/<item>[\s\S]*?<\/item>/g) || [];
    
    itemMatches.slice(0, 5).forEach(item => {
      const title = (item.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/) || [])[1] || '';
      const link = (item.match(/<link>(.*?)<\/link>/) || [])[1] || '';
      const description = (item.match(/<description><!\[CDATA\[(.*?)\]\]><\/description>/) || [])[1] || '';
      const pubDate = (item.match(/<pubDate>(.*?)<\/pubDate>/) || [])[1] || '';
      
      if (title && link) {
        items.push({ title, link, description, pubDate });
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS:', error);
  }
  
  return items;
}

function parseArxivXML(xmlData) {
  const papers = [];
  try {
    const entryMatches = xmlData.match(/<entry>[\s\S]*?<\/entry>/g) || [];
    
    entryMatches.slice(0, 3).forEach(entry => {
      const title = (entry.match(/<title>(.*?)<\/title>/) || [])[1] || '';
      const summary = (entry.match(/<summary>(.*?)<\/summary>/) || [])[1] || '';
      const id = (entry.match(/<id>(.*?)<\/id>/) || [])[1] || '';
      const published = (entry.match(/<published>(.*?)<\/published>/) || [])[1] || '';
      
      if (title && summary) {
        papers.push({
          title: title.replace(/\s+/g, ' ').trim(),
          summary: summary.replace(/\s+/g, ' ').trim().substring(0, 300),
          id: id,
          published: published,
          authors: []
        });
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ arXiv XML:', error);
  }
  
  return papers;
}

function generateSearchSummary(query, results) {
  if (results.length === 0) {
    return `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
  }

  const sources = [...new Set(results.map(r => r.source))];
  const topResult = results[0];
  
  let summary = `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.join(', ')}. `;
  
  if (topResult.snippet) {
    summary += `–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${topResult.snippet.substring(0, 200)}...`;
  }
  
  return summary;
}

function calculateSearchConfidence(results) {
  if (results.length === 0) return 0.1;
  
  const avgRelevance = results.reduce((sum, r) => sum + (r.relevanceScore || 0.5), 0) / results.length;
  const sourceVariety = new Set(results.map(r => r.source)).size;
  
  return Math.min(0.95, avgRelevance * 0.7 + (sourceVariety / 4) * 0.3);
}

export default {
  search,
  performAdvancedSearch
};
