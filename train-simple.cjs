/**
 * –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
 */

async function trainSimple() {
  console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ LITE –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º neural integration
    const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');
    const neuralIntegration = getGlobalNeuralIntegration();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!neuralIntegration.isInitialized) {
      await neuralIntegration.initializeLite();
    }
    
    const neuralLite = neuralIntegration.neuralLite;
    console.log('‚úÖ Neural Lite –ø–æ–ª—É—á–µ–Ω');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const trainingData = [
      { input: '–ü—Ä–∏–≤–µ—Ç', output: '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –Ø BOOOMERANGS AI' },
      { input: '–ö–∞–∫ –¥–µ–ª–∞', output: '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º' },
      { input: '–ß—Ç–æ —É–º–µ–µ—à—å', output: '–Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–π' },
      { input: '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É', output: '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –û–ø–∏—à–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å' },
      { input: '–°–ø–∞—Å–∏–±–æ', output: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º' }
    ];
    
    console.log(`üìö –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞
    if (neuralLite.model && neuralLite.model.optimizer) {
      console.log('‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞');
    } else if (neuralLite.model) {
      console.log('üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å...');
      neuralLite.model.compile({
        optimizer: 'adam',
        loss: 'sparseCategoricalCrossentropy',
        metrics: ['accuracy']
      });
      console.log('‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞');
    } else {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    await neuralLite.trainOnDialogues(trainingData);
    
    console.log('üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:');
    const testInputs = ['–ü—Ä–∏–≤–µ—Ç', '–ß—Ç–æ —É–º–µ–µ—à—å', '–°–æ–∑–¥–∞–π –∫–æ—Ç–∞'];
    
    for (const input of testInputs) {
      try {
        const response = await neuralLite.generateResponse(input, {
          maxTokens: 30,
          temperature: 0.8
        });
        console.log(`"${input}" ‚Üí "${response}"`);
      } catch (error) {
        console.log(`"${input}" ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    await neuralLite.saveModel();
    console.log('üíæ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    throw error;
  }
}

trainSimple().then(() => {
  console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});