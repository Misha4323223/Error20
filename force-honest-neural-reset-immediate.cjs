/**
 * üîß –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° –ö –ß–ï–°–¢–ù–û–°–¢–ò
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç neural integration –≤ runtime –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const http = require('http');

async function forceHonestResetImmediate() {
  console.log('üîß –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° –ö –ß–ï–°–¢–ù–û–°–¢–ò');
  console.log('==============================================');

  try {
    // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
    console.log('\n1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–±–ª–µ–º—É –ª–∂–∏...');
    const statusBefore = await makeRequest('/api/neural/status');
    const statsBefore = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API –ª–∂–µ—Ç: ${statusBefore.status}`);
    console.log(`  Stats API —á–µ—Å—Ç–Ω—ã–π: ${statsBefore.mode || statsBefore.neuralMode}`);
    console.log(`  –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏: ${statsBefore.layers}`);
    
    const isLyingNow = statusBefore.status === 'full' && statsBefore.layers < 12;
    
    if (!isLyingNow) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —á–µ—Å—Ç–Ω–∞');
      return { success: true, honest: true };
    }
    
    console.log('‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –õ–û–ñ: –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–ª—è–µ—Ç "full", –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç "lite"');
    
    // –®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    console.log('\n2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å —Å —Ñ–ª–∞–≥–æ–º —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    const honestRequest = await makePostRequest('/api/neural/force-honest-mode', {
      forceMode: 'lite',
      resetStatusAPI: true,
      reason: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π –æ full —Ä–µ–∂–∏–º–µ'
    });
    
    console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${honestRequest.success ? '—É—Å–ø–µ—Ö' : '–æ—à–∏–±–∫–∞'}`);
    
    // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ endpoint –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å
    if (!honestRequest.success && honestRequest.error && honestRequest.error.includes('404')) {
      console.log('\n  2.1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å lite –º–æ–¥–µ–ª—å —Å —Ñ–ª–∞–≥–æ–º —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
      const reinitResponse = await makePostRequest('/api/neural/initialize-lite', {
        forceHonest: true,
        resetMode: true,
        preventAutoUpgrade: true
      });
      
      console.log(`      –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${reinitResponse.success ? '—É—Å–ø–µ—Ö' : '–æ—à–∏–±–∫–∞'}`);
    }
    
    // –®–∞–≥ 3: –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('\n3. –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    const statusAfter = await makeRequest('/api/neural/status');
    const statsAfter = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${statusAfter.status}`);
    console.log(`  Stats API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${statsAfter.mode || statsAfter.neuralMode}`);
    
    const isNowHonest = statusAfter.status === (statsAfter.mode || statsAfter.neuralMode);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –°–ë–†–û–°–ê:');
    if (isNowHonest) {
      console.log('‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å—Ç–∞–ª–∞ —á–µ—Å—Ç–Ω–æ–π!');
      console.log(`‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: "${statusAfter.status}"`);
      console.log('‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–π –ª–∂–∏ –æ full —Ä–µ–∂–∏–º–µ');
      
      return {
        success: true,
        honest: true,
        mode: statusAfter.status,
        beforeStatus: statusBefore.status,
        afterStatus: statusAfter.status
      };
    } else {
      console.log('‚ùå –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
      console.log(`‚ùå Status: "${statusAfter.status}" vs Stats: "${statsAfter.mode || statsAfter.neuralMode}"`);
      
      return {
        success: false,
        honest: false,
        needsServerRestart: true,
        mode: statusAfter.status,
        recommendation: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
      };
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: ${error.message}`);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

function makePostRequest(path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(responseData);
          resolve(jsonData);
        } catch (e) {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ JSON, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å 404 –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          resolve({ 
            success: false, 
            error: `HTTP ${res.statusCode}: ${responseData}`,
            statusCode: res.statusCode
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
if (require.main === module) {
  forceHonestResetImmediate()
    .then(result => {
      console.log('\nüèÅ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
      if (result.recommendation) {
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${result.recommendation}`);
      }
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { forceHonestResetImmediate };