/**
 * üõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–°–¢–ù–û–°–¢–ò NEURAL INTEGRATION
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫ —á–µ—Å—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é lite –º–æ–¥–µ–ª–∏
 */

const http = require('http');
const { Worker } = require('worker_threads');

async function fixNeuralHonestyFinal() {
  console.log('üõ†Ô∏è –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–°–¢–ù–û–°–¢–ò NEURAL INTEGRATION');
  console.log('=====================================================');

  try {
    console.log('\n1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const statusBefore = await makeRequest('/api/neural/status');
    const statsBefore = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API —Å–æ–æ–±—â–∞–µ—Ç: ${statusBefore.status}`);
    console.log(`  Stats API —Å–æ–æ–±—â–∞–µ—Ç: ${statsBefore.mode || statsBefore.neuralMode}`);
    console.log(`  –†–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–∏: ${statsBefore.layers || 'unknown'}`);
    console.log(`  –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${statsBefore.parameters || 'unknown'}`);
    
    const isLying = statusBefore.status === 'full' && statsBefore.layers < 12;
    
    if (!isLying) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —á–µ—Å—Ç–Ω–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return { success: true, message: 'Already honest' };
    }
    
    console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –õ–û–ñ–¨: Status —Å–æ–æ–±—â–∞–µ—Ç "full", –Ω–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç lite –º–æ–¥–µ–ª—å');
    console.log('\n2. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–µ—Å—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    console.log('\n  2.1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lite –º–æ–¥–µ–ª–∏...');
    const honestInit = await makePostRequest('/api/neural/initialize-lite', {
      forceHonest: true,
      resetToLite: true
    });
    
    console.log(`     –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${honestInit.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    if (honestInit.message) {
      console.log(`     –°–æ–æ–±—â–µ–Ω–∏–µ: ${honestInit.message}`);
    }
    
    // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('\n  2.2. –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    const statusAfter = await makeRequest('/api/neural/status');
    const statsAfter = await makeRequest('/api/neural/stats');
    
    console.log(`  Status API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${statusAfter.status}`);
    console.log(`  Stats API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${statsAfter.mode || statsAfter.neuralMode}`);
    console.log(`  –°–ª–æ–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${statsAfter.layers || 'unknown'}`);
    
    const isNowHonest = statusAfter.status === (statsAfter.mode || statsAfter.neuralMode);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    if (isNowHonest) {
      console.log('‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ —á–µ—Å—Ç–Ω–æ–π!');
      console.log(`‚úÖ –û–±–∞ API —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ —Å–æ–æ–±—â–∞—é—Ç: "${statusAfter.status}"`);
      console.log('‚úÖ –õ–æ–∂–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ "full" —Ä–µ–∂–∏–º–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
      
      return {
        success: true,
        message: 'Neural system is now honest',
        statusMode: statusAfter.status,
        statsMode: statsAfter.mode || statsAfter.neuralMode,
        actualLayers: statsAfter.layers
      };
    } else {
      console.log('‚ùå –ù–ï–£–î–ê–ß–ê: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ª–≥–∞—Ç—å');
      console.log(`‚ùå Status: "${statusAfter.status}" vs Stats: "${statsAfter.mode || statsAfter.neuralMode}"`);
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      
      return {
        success: false,
        message: 'Honesty fix failed, server restart needed',
        statusMode: statusAfter.status,
        statsMode: statsAfter.mode || statsAfter.neuralMode,
        recommendation: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'
      };
    }

  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error.message}`);
    return { 
      success: false, 
      error: error.message,
      recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞'
    };
  }
}

function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${data}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(5000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.end();
  });
}

function makePostRequest(path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(responseData);
          resolve(jsonData);
        } catch (e) {
          reject(new Error(`Invalid JSON response from ${path}: ${responseData}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.abort();
      reject(new Error(`Request timeout for ${path}`));
    });

    req.write(postData);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if (require.main === module) {
  fixNeuralHonestyFinal()
    .then(result => {
      console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      if (result.recommendation) {
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${result.recommendation}`);
      }
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { fixNeuralHonestyFinal };