#!/usr/bin/env node

/**
 * üß™ –¢–ï–°–¢ WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é
 */

const WebSocket = require('ws');

async function testWebSocketConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  
  return new Promise((resolve, reject) => {
    const ws = new WebSocket('ws://localhost:5000/api/ws');
    
    const timeout = setTimeout(() => {
      console.log('‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket');
      ws.close();
      reject(new Error('Connection timeout'));
    }, 10000);
    
    ws.on('open', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      clearTimeout(timeout);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const testMessage = {
        type: 'neural_client_ready',
        timestamp: new Date().toISOString(),
        test: true
      };
      
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', testMessage);
      ws.send(JSON.stringify(testMessage));
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        if (message.type === 'connection_established') {
          console.log('üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:', message.clientsCount);
          console.log('üÜî ID —Å–µ—Ä–≤–µ—Ä–∞:', message.serverId);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
    
    ws.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
      clearTimeout(timeout);
      reject(error);
    });
    
    ws.on('close', (code, reason) => {
      console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥ ${code}, –ø—Ä–∏—á–∏–Ω–∞: ${reason?.toString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      clearTimeout(timeout);
      resolve();
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      ws.close();
    }, 5000);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWebSocketConnection()
  .then(() => {
    console.log('‚úÖ –¢–µ—Å—Ç WebSocket –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –¢–µ—Å—Ç WebSocket –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.message);
    process.exit(1);
  });