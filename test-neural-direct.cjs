/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */

async function testNeuralDirect() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º neural integration
    const { getGlobalNeuralIntegration } = require('./server/neural-integration.cjs');
    const neuralIntegration = getGlobalNeuralIntegration();
    
    console.log('üìä –°—Ç–∞—Ç—É—Å neural integration:');
    console.log('  Mode:', neuralIntegration.mode);
    console.log('  Initialized:', neuralIntegration.isInitialized);
    console.log('  Neural Core:', !!neuralIntegration.neuralCore);
    console.log('  Neural Lite:', !!neuralIntegration.neuralLite);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    const currentModel = neuralIntegration.getCurrentModel();
    console.log('  Current Model:', !!currentModel);
    
    if (currentModel) {
      console.log('  Model Type:', currentModel.constructor.name);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º generateResponse...');
      const testInput = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?";
      
      try {
        const response = await currentModel.generateResponse(testInput, {
          maxTokens: 50,
          temperature: 0.8
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:', response);
        console.log('‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', response?.length || 0);
        
      } catch (genError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', genError.message);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º hybrid response
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º generateHybridResponse...');
    try {
      const hybridResponse = await neuralIntegration.generateHybridResponse("–ü—Ä–∏–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å!", {
        maxTokens: 100,
        temperature: 0.9
      });
      
      console.log('‚úÖ Hybrid –æ—Ç–≤–µ—Ç:', hybridResponse);
      console.log('‚úÖ Hybrid –¥–ª–∏–Ω–∞:', hybridResponse?.length || 0);
      
    } catch (hybridError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ hybrid –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', hybridError.message);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation engine
    console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ conversation engine...');
    try {
      const conversationEngine = require('./server/conversation-engine.cjs');
      const convResponse = await conversationEngine.processUserInput("–ü—Ä–∏–≤–µ—Ç!", {
        userId: 'test',
        sessionId: 'test-session'
      });
      
      console.log('‚úÖ Conversation –æ—Ç–≤–µ—Ç:', convResponse.reply?.substring(0, 200));
      console.log('‚úÖ Metadata:', convResponse.metadata);
      
    } catch (convError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ conversation engine:', convError.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    console.error(error.stack);
  }
}

testNeuralDirect().then(() => {
  console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});